[
  {
    "id": "0875265c7a537c98",
    "type": "tab",
    "label": "IoT-Sensor-Data-Processing-NodeRED",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "6d4c35635af64303",
    "type": "mqtt in",
    "z": "0875265c7a537c98",
    "name": "",
    "topic": "team/sensors",
    "qos": "0",
    "datatype": "auto-detect",
    "broker": "37464be6e8cb6157",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 410,
    "y": 380,
    "wires": [
      [
        "3c2f640671c1b0d9",
        "319ec4ba5791e83a",
        "4aee3da374dfae53",
        "ea121bc3caa90420",
        "ec627875e5a293cb",
        "273897f198194a61",
        "fcb62e7a4a9daf92"
      ]
    ]
  },
  {
    "id": "3c2f640671c1b0d9",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Hot Path Heartrate",
    "func": "\nvar teamId = global.get(\"selectedTeam\");\nvar anomaly = global.get(\"anomaly\");\n\nif (msg.payload.sensor_type === \"vital_parameters\") {\n\nif(msg.payload.sensor_team === teamId && teamId !== \"all\"){\n    let { heart_rate, body_temperature } = msg.payload.data;\n    if(anomaly === true){\n        heart_rate = heart_rate + 50;\n    }\n    var average = calculateAverage(heart_rate);\n\n    if (heart_rate > 100 || body_temperature > 37.5) {\n        node.warn(\"Heart Rate: critical, value: \"+ heart_rate);\n        msg.payload = {\n            status: \"high\",\n            heart_rate: heart_rate,\n            average : average\n        };   return msg;\n    }else{\n        msg.payload = {\n            status: \"normal\",\n            heart_rate: heart_rate,\n            average : average\n        };  return msg;\n    }\n}else if(teamId === \"all\"){\n   let heart_rate1 = context.get('HRTeam1') || 0;\n   let heart_rate2 = context.get('HRTeam2') || 0;\n   let heart_rate3 = context.get('HRTeam3') || 0;\n\n    if(msg.payload.sensor_team === \"team_1\"){\n        heart_rate1 = msg.payload.data.heart_rate;\n        context.set('HRTeam1', heart_rate1);\n    }\n    if(msg.payload.sensor_team === \"team_2\"){\n        heart_rate2 = msg.payload.data.heart_rate;\n        context.set('HRTeam2', heart_rate2);\n    }\n    if(msg.payload.sensor_team === \"team_3\"){\n        heart_rate3 = msg.payload.data.heart_rate;\n        context.set('HRTeam3', heart_rate3);\n\n    }\n\n    const heart_rate = ((heart_rate1 +  heart_rate2 + heart_rate3)/3).toFixed(2);\n    var average = calculateAverage(heart_rate);\n    msg.payload = {\n        status : \"combined values\",\n        heart_rate : heart_rate,\n        average : average,\n        };\n    return msg;\n}\n\nfunction calculateAverage(heart_rate){\n    var values = context.get('values') || [];\n     var sum = context.get('sum') || 0;\n \nvar value = parseFloat(heart_rate);\n\nif (!isNaN(value)) {\n    values.push(value)\n    sum += value;\n\n    if (values.length > 10) {\n        var removedValue = values.shift();\n        sum -= removedValue;\n    }\n\n    var average = (sum / values.length).toFixed(2);\n\n    context.set('values', values);\n    context.set('sum', sum);\n    return average;\n    } \n}\n}\n\n\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 650,
    "y": 380,
    "wires": [
      [
        "e0e2fbedeab9d52a",
        "04a01a6e8073601e",
        "e5c24fca78b8b8a1",
        "d26922f3a065c330"
      ]
    ]
  },
  {
    "id": "319ec4ba5791e83a",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Hot Path Body Temperature",
    "func": "var teamId = global.get(\"selectedTeam\");\n\n\nif (msg.payload.sensor_type === \"vital_parameters\") {\n\nif(msg.payload.sensor_team === teamId && teamId !== \"all\"){\n\n    const { heart_rate, body_temperature } = msg.payload.data;\n    var average = calculateAverage(body_temperature);\n    \n    if (heart_rate > 100 || body_temperature > 37.5) {\n        node.warn(\"Anomaly detected:\"+ msg.payload);\n     msg.payload = {\n            status: \"critical\",\n            body_temperature: body_temperature,\n            average: average\n        };   return msg;\n    }else{\n        msg.payload = {\n            status: \"normal\",\n            body_temperature: body_temperature,\n            average : average\n        };   return msg;\n    }\n    \n} else if (teamId === \"all\") {\n    let body_temperature1 = context.get('BRTeam1') || 0;\n    let body_temperature2 = context.get('BRTeam2') || 0;\n    let body_temperature3 = context.get('BRTeam3') || 0;\n\n    if (msg.payload.sensor_team === \"team_1\") {\n        body_temperature1 = msg.payload.data.body_temperature;\n        context.set('BRTeam1', body_temperature1);\n    }\n    if (msg.payload.sensor_team === \"team_2\") {\n        body_temperature2 = msg.payload.data.body_temperature;\n        context.set('BRTeam2', body_temperature2);\n    }\n    if (msg.payload.sensor_team === \"team_3\") {\n        body_temperature3 = msg.payload.data.body_temperature;\n        context.set('BRTeam3', body_temperature3);\n\n    }\n\n    const body_temperature = ((body_temperature1 + body_temperature2 + body_temperature3) / 3).toFixed(2);\n    var average = calculateAverage(body_temperature);\n    msg.payload = {\n        status: \"combined values\",\n        body_temperature: body_temperature,\n        average: average\n    };\n    return msg;\n}\n\nfunction calculateAverage(body_temperature){\n    var values = context.get('values') || [];\n    var sum = context.get('sum') || 0;\n\n    var value = parseFloat(body_temperature);\n\n    if (!isNaN(value)) {\n        values.push(value)\n        sum += value;\n\n        if (values.length > 10) {\n            var removedValue = values.shift();\n            sum -= removedValue;\n        }\n\n        var average = (sum / values.length).toFixed(2);\n\n        context.set('values', values);\n        context.set('sum', sum);\n        return average;\n    }\n\n}\n}\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 660,
    "y": 500,
    "wires": [["257e5af80a816cc2", "13e5042746f82f34", "e63c69e2730238bd"]]
  },
  {
    "id": "4aee3da374dfae53",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Hot Path Position",
    "func": "// retrieve the teamId from the global context\nvar teamId = global.get(\"selectedTeam\");\nvar previousTeamId = context.get(\"previousTeamId\");\n\nvar deletePayloads = [];\nvar updatePayload = null;\n\n// function to add a deletion message\nfunction addDeletePayload(name) {\n    deletePayloads.push({\n        name: name,\n        deleted: true\n    });\n}\n\n// handle incoming payload\nif (msg.payload.sensor_type === \"position\") {\n    // handle the case where 'all' was previously selected\n    if (previousTeamId === \"all\" && teamId !== \"all\") {\n        // if switching from \"all\" to a specific team, delete all previous team markers\n        [\"team_1\", \"team_2\", \"team_3\"].forEach(team => {\n            if (team !== teamId) {\n                addDeletePayload(team);\n            }\n        });\n    }\n    // handle the case where 'all' is currently selected\n    if (teamId === \"all\") {\n        // add/update markers for all teams\n        updatePayload = {\n            name: msg.payload.sensor_team,\n            lat: msg.payload.data.latitude,\n            lon: msg.payload.data.longitude\n        };\n    } else if (teamId !== \"all\" && msg.payload.sensor_team === teamId) {\n        // add/update marker for the selected team\n        updatePayload = {\n            name: teamId,\n            lat: msg.payload.data.latitude,\n            lon: msg.payload.data.longitude,\n            altitude: msg.payload.data.altitude\n        };\n    }\n}\n// handle the case where switching from a specific team to another\nif (previousTeamId !== \"all\" && previousTeamId !== teamId && teamId !== \"all\") {\n    addDeletePayload(previousTeamId);\n}\n// update the context with the current teamId\ncontext.set(\"previousTeamId\", teamId);\n\nmsg.payload = deletePayloads;\nif (updatePayload) {\n    msg.payload.push(updatePayload);\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 700,
    "wires": [["43c262bf3e5f0b40"]],
    "info": "// Retrieve the teamId from the global context\r\nvar teamId = global.get(\"selectedTeam\");\r\nvar previousTeamId = context.get(\"previousTeamId\");\r\n\r\n// Debugging output\r\nnode.warn(`Current teamId: ${teamId}`);\r\nnode.warn(`Previous teamId: ${previousTeamId}`);\r\n\r\nvar deletePayload = null;\r\nvar updatePayload = null;\r\n\r\n// Handle incoming payload\r\nif (msg.payload.sensor_type === \"position\") {\r\n    if (teamId !== \"all\" && msg.payload.sensor_team === teamId) {\r\n        // Prepare update payload for the selected team\r\n        const { latitude, longitude, altitude } = msg.payload.data;\r\n        updatePayload = {\r\n            name: teamId,\r\n            lat: latitude,\r\n            lon: longitude,\r\n            altitude: altitude\r\n        };\r\n    } else if (teamId === \"all\") {\r\n        // Prepare update payload for all teams\r\n        const { latitude, longitude } = msg.payload.data;\r\n        updatePayload = {\r\n            name: msg.payload.sensor_team,\r\n            lat: latitude,\r\n            lon: longitude\r\n        };\r\n    }\r\n}\r\n\r\n// Prepare delete payload if the teamId has changed\r\nif (previousTeamId && previousTeamId !== teamId) {\r\n    if(previousTeamId === \"all\" && teamId === \"team_1\"){\r\n        deletePayload = {\r\n            {name : previousTeamId}\r\n        }\r\n    }\r\n    deletePayload = {\r\n        name: previousTeamId,\r\n        deleted: true\r\n    };\r\n    node.warn(`Preparing to delete marker for team: ${previousTeamId}`);\r\n}\r\n\r\n// Update the context with the current teamId\r\ncontext.set(\"previousTeamId\", teamId);\r\n\r\n// Construct the output payload\r\nmsg.payload = [];\r\nif (deletePayload) {\r\n    msg.payload.push(deletePayload);\r\n}\r\nif (updatePayload) {\r\n    msg.payload.push(updatePayload);\r\n}\r\n\r\n// Return the constructed payload array\r\nreturn msg;"
  },
  {
    "id": "ea121bc3caa90420",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Hot Path Speed",
    "func": "var teamId = global.get(\"selectedTeam\");\n\nif (msg.payload.sensor_type === \"speed\") {\nif (msg.payload.sensor_team === teamId && teamId !== \"all\") {\n\n\nconst speed = msg.payload.data.speed;\n    var averageSpeed = calculateAverage(speed);\n         \n    if (speed <= 8) {\n        msg.payload = {\n            activity: \"walking\",\n            speed: speed,\n            averageSpeed: averageSpeed\n        };\n        flow.set(\"dataWalking\", msg.payload);\n\n         //return msg;\n    } else if(speed > 8 && speed < 16) {\n        msg.payload = {\n            activity: \"running\",\n            speed: speed,\n            averageSpeed: averageSpeed\n        }; //return msg;\n    }else{\n        msg.payload = {\n            activity: \"sprinting\",\n            speed : speed,\n            averageSpeed: averageSpeed\n        }; //return msg;\n    }\n    flow.set(\"dataSpeed\", msg.payload);\n    return msg;\n    \n    }  else if (teamId === \"all\") {\n    let speed1 = context.get('speedTeam1') || 0;\n    let speed2 = context.get('speedTeam2') || 0;\n    let speed3 = context.get('speedTeam3') || 0;\n\n    if (msg.payload.sensor_team === \"team_1\") {\n        speed1 = parseFloat(msg.payload.data.speed);\n        context.set('speedTeam1', speed1);\n    }\n    if (msg.payload.sensor_team === \"team_2\") {\n        speed2 = parseFloat(msg.payload.data.speed);\n        context.set('speedTeam2', speed2);\n    }\n    if (msg.payload.sensor_team === \"team_3\") {\n        speed3 = parseFloat(msg.payload.data.speed);\n        context.set('speedTeam3', speed3);\n\n    }\n\n    var speed = ((speed1 + speed2 + speed3) / 3).toFixed(2);\n    var averageSpeed = calculateAverage(speed);\n    msg.payload = {\n        activity: \"combined activities\",\n        speed: speed,\n        averageSpeed: averageSpeed,\n        speed1 : speed1,\n        speed2: speed2,\n        speed3: speed3\n    };\n    return msg;\n}\n    function calculateAverage(speed){\n        var values = context.get('values') || [];\n        var sum = context.get('sum') || 0;\n\n        var value = parseFloat(speed);\n\n        if (!isNaN(value)) {\n            values.push(value)\n            sum += value;\n\n            if (values.length > 10) {\n                var removedValue = values.shift();\n                sum -= removedValue;\n            }\n\n            var averageSpeed = (sum / values.length).toFixed(2);\n\n            context.set('values', values);\n            context.set('sum', sum);\n            return averageSpeed;\n        }\n    }\n}\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 620,
    "y": 820,
    "wires": [
      [
        "176e96e7b2ed4081",
        "3131c8ccd6898496",
        "37eec7053d7af185",
        "d26922f3a065c330"
      ]
    ]
  },
  {
    "id": "ec627875e5a293cb",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Hot Path Acceleration",
    "func": "\n\nvar current_timestamp = msg.payload.timestampRegular;\nvar previous_velocityTeam1 = context.get('previous_velocityTeam1') || null;\nvar previous_velocityTeam2 = context.get('previous_velocityTeam2') || null;\nvar previous_velocityTeam3 = context.get('previous_velocityTeam3') || null;\nvar previous_timestampTeam1 = context.get('previous_timestampTeam1') || null;\nvar previous_timestampTeam2 = context.get('previous_timestampTeam2') || null;\nvar previous_timestampTeam3 = context.get('previous_timestampTeam3') || null;\nvar accelerationTeam1 = context.get('accelerationTeam3') || null;;\nvar accelerationTeam2 = context.get('accelerationTeam3') || null;;\nvar accelerationTeam3 = context.get('accelerationTeam3') || null;;\n\nvar teamId = global.get(\"selectedTeam\");\nlet current_velocityTeam1 = null;\nlet current_velocityTeam2 = null;\nlet current_velocityTeam3 = null;\n\n\nif (msg.payload.sensor_type === \"speed\") {\n     \nif(msg.payload.sensor_team === \"team_1\"){\n    current_velocityTeam1 = msg.payload.data.speed;\n\nif (previous_velocityTeam1 !== null && previous_timestampTeam1 !== null) {\n\n    var velocity = current_velocityTeam1 - previous_velocityTeam1;\n    var time = current_timestamp - previous_timestampTeam1;\n\n    // Check if delta_t is not zero to avoid division by zero\n    if (time !== 0) {\n        // Calculate acceleration\n        accelerationTeam1 = velocity / time;\n        context.set('accelerationTeam1', accelerationTeam1);\n        context.set('previous_velocityTeam1', current_velocityTeam1);\n        context.set('previous_timestampTeam1', current_timestamp);\n    } else {\n        return null; // Ignore the message if delta_t is zero\n    }\n} else {\n    // Initialize context variables if they are not set\n    context.set('previous_velocityTeam1', current_velocityTeam1);\n    context.set('previous_timestampTeam1', current_timestamp);\n    return null; // No acceleration can be calculated on the first data point\n}\n    } \nif (msg.payload.sensor_team === \"team_2\") {\n           current_velocityTeam2 = msg.payload.data.speed;\n           \n        if (previous_velocityTeam2 !== null && previous_timestampTeam2 !== null) {\n\n            var velocity = current_velocityTeam2 - previous_velocityTeam2;\n            var time = current_timestamp - previous_timestampTeam2;\n            \n            // Check if delta_t is not zero to avoid division by zero\n            if (time !== 0) {\n                // Calculate acceleration\n                accelerationTeam2 = velocity / time;\n                context.set('accelerationTeam2', accelerationTeam2);\n                context.set('previous_velocityTeam2', current_velocityTeam2);\n                context.set('previous_timestamp', current_timestamp);\n                \n                \n            } else {\n                return null; // Ignore the message if delta_t is zero\n            }\n        } else {\n            // Initialize context variables if they are not set\n            context.set('previous_velocityTeam2', current_velocityTeam2);\n            context.set('previous_timestampTeam2', current_timestamp);\n            return null; // No acceleration can be calculated on the first data point\n        }\n    } \nif (msg.payload.sensor_team === \"team_3\") {\n        current_velocityTeam3 = msg.payload.data.speed;\n\n        if (previous_velocityTeam3 !== null && previous_timestampTeam3 !== null) {\n\n            var velocity = current_velocityTeam3 - previous_velocityTeam3;\n            var time = current_timestamp - previous_timestampTeam3;\n\n            // Check if delta_t is not zero to avoid division by zero\n            if (time !== 0) {\n                // Calculate acceleration\n                accelerationTeam3 = velocity / time;\n                context.set('accelerationTeam3', accelerationTeam3);\n                context.set('previous_velocityTeam3', current_velocityTeam3);\n                context.set('previous_timestampTeam3', current_timestamp);\n            } else {\n                return null; // Ignore the message if delta_t is zero\n            }\n        } else {\n            // Initialize context variables if they are not set\n            context.set('previous_velocityTeam3', current_velocityTeam3);\n            context.set('previous_timestampTeam3', current_timestamp);\n            return null; // No acceleration can be calculated on the first data point\n        }\n    }\n    if(teamId === \"team_1\"){\n        var acceleration = accelerationTeam1;\n        msg.payload = acceleration;\n    }else if(teamId === \"team_2\"){\n        var acceleration = accelerationTeam2;\n        msg.payload = acceleration;\n    }else if(teamId === \"team_3\"){\n        var acceleration = accelerationTeam3;\n        msg.payload = acceleration;\n        \n    }else {\n        \n        let acceleration = (accelerationTeam1 + accelerationTeam2 + accelerationTeam3)/3;\n        msg.payload = acceleration;\n    }\n    return msg;\n}",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 940,
    "wires": [["bce7cc71d247ae95"]]
  },
  {
    "id": "190a37541752bfc6",
    "type": "ui_gauge",
    "z": "0875265c7a537c98",
    "name": "",
    "group": "e6441943fe7b404b",
    "order": 5,
    "width": 8,
    "height": 6,
    "gtype": "gage",
    "title": "heart_rate",
    "label": "bpm",
    "format": "{{value}}",
    "min": 0,
    "max": "200",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "80",
    "seg2": "120",
    "diff": false,
    "className": "",
    "x": 1110,
    "y": 400,
    "wires": []
  },
  {
    "id": "e0e2fbedeab9d52a",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "extract heart rate",
    "func": "\nconst heart_rate = msg.payload.heart_rate;\nmsg.payload = heart_rate;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 400,
    "wires": [["190a37541752bfc6"]]
  },
  {
    "id": "04a01a6e8073601e",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 6,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Status heart rate",
    "format": "{{msg.payload.status}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 910,
    "y": 360,
    "wires": []
  },
  {
    "id": "257e5af80a816cc2",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "extract body temperature",
    "func": "const body_temperature = msg.payload.body_temperature;\nmsg.payload = body_temperature;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 540,
    "wires": [["9ad2bb59571a178a"]]
  },
  {
    "id": "9ad2bb59571a178a",
    "type": "ui_gauge",
    "z": "0875265c7a537c98",
    "name": "",
    "group": "e6441943fe7b404b",
    "order": 12,
    "width": 8,
    "height": 6,
    "gtype": "gage",
    "title": "body_temperature",
    "label": "°C",
    "format": "{{value}}",
    "min": "34",
    "max": "45",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "38",
    "seg2": "42",
    "diff": false,
    "className": "",
    "x": 1130,
    "y": 540,
    "wires": []
  },
  {
    "id": "13e5042746f82f34",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 13,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Status body temperature",
    "format": "{{msg.payload.status}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 910,
    "y": 500,
    "wires": []
  },
  {
    "id": "43c262bf3e5f0b40",
    "type": "ui_worldmap",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 4,
    "width": 8,
    "height": 8,
    "name": "Position",
    "lat": "",
    "lon": "",
    "zoom": "7",
    "layer": "OSMG",
    "cluster": "",
    "maxage": "",
    "usermenu": "hide",
    "layers": "hide",
    "panit": "false",
    "panlock": "false",
    "zoomlock": "false",
    "hiderightclick": "true",
    "coords": "none",
    "showgrid": "false",
    "showruler": "false",
    "allowFileDrop": "false",
    "path": "/worldmap2",
    "overlist": "DR,CO,RA,DN,HM",
    "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
    "mapname": "",
    "mapurl": "",
    "mapopt": "",
    "mapwms": false,
    "x": 800,
    "y": 700,
    "wires": []
  },
  {
    "id": "8ed4b00cf0d9115b",
    "type": "ui_gauge",
    "z": "0875265c7a537c98",
    "name": "",
    "group": "e6441943fe7b404b",
    "order": 20,
    "width": 8,
    "height": 6,
    "gtype": "gage",
    "title": "speed",
    "label": "km/h",
    "format": "{{value}}",
    "min": 0,
    "max": "20",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "",
    "seg2": "",
    "diff": false,
    "className": "",
    "x": 1010,
    "y": 940,
    "wires": []
  },
  {
    "id": "176e96e7b2ed4081",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "extract speed",
    "func": "\nconst speed = msg.payload.speed;\nmsg.payload = speed;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 860,
    "y": 940,
    "wires": [["8ed4b00cf0d9115b"]]
  },
  {
    "id": "3131c8ccd6898496",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 21,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Activity status",
    "format": "{{msg.payload.activity}} ",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 860,
    "y": 900,
    "wires": []
  },
  {
    "id": "e5c24fca78b8b8a1",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 7,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Average current heartbeat rate: ",
    "format": "{{msg.payload.average}} bpm",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 950,
    "y": 320,
    "wires": []
  },
  {
    "id": "e63c69e2730238bd",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 14,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Average current body temperature:",
    "format": "{{msg.payload.average}} °C",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 940,
    "y": 460,
    "wires": []
  },
  {
    "id": "37eec7053d7af185",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 23,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Average current pace",
    "format": "{{msg.payload.averageSpeed}} km/h",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 880,
    "y": 840,
    "wires": []
  },
  {
    "id": "bce7cc71d247ae95",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 25,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Acceleration",
    "format": "{{msg.payload}} m/s^2",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 850,
    "y": 980,
    "wires": []
  },
  {
    "id": "d26922f3a065c330",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "detect heart anomaly",
    "func": "var average = msg.payload.average;  \nvar activitySpeed = flow.get(\"dataSpeed\").activity;  \nlet statusAnomaly;\n\nif(average >= 110 && activitySpeed === \"walking\"){\n    statusAnomaly = \"Heart anomaly detected\";\n}else if(average >= 130 && activitySpeed === \"running\"){\n    statusAnomaly = \"Heart anomaly detected\";\n}else if(average >= 160 && activitySpeed === \"sprinting\"){\n    statusAnomaly = \"Heart anomaly detected\";\n}else{\n    statusAnomaly = \"no anomaly detected\";\n}\nmsg.payload = statusAnomaly;\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 280,
    "wires": [["2fd1a1d25ec9a0f1"]]
  },
  {
    "id": "0ee146bee629ef10",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 15,
    "width": 8,
    "height": 1,
    "name": "",
    "label": "Distance traveled",
    "format": "{{msg.payload}} km",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 830,
    "y": 600,
    "wires": []
  },
  {
    "id": "2fd1a1d25ec9a0f1",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 8,
    "width": 9,
    "height": 1,
    "name": "",
    "label": "Status Anomaly",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 1140,
    "y": 280,
    "wires": []
  },
  {
    "id": "87acd798b1020c08",
    "type": "ui_dropdown",
    "z": "0875265c7a537c98",
    "name": "",
    "label": "",
    "tooltip": "",
    "place": "Select team",
    "group": "e6441943fe7b404b",
    "order": 1,
    "width": 8,
    "height": 1,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "All teams",
        "value": "all",
        "type": "str"
      },
      {
        "label": "Team 1",
        "value": "team_1",
        "type": "str"
      },
      {
        "label": " Team 2",
        "value": "team_2",
        "type": "str"
      },
      {
        "label": " Team 3",
        "value": "team_3",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "payload",
    "topicType": "msg",
    "className": "",
    "x": 100,
    "y": 380,
    "wires": [["cb9aaaa6c3b026b9"]]
  },
  {
    "id": "cb9aaaa6c3b026b9",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "extract dropdown value",
    "func": "\nvar teamId = msg.payload;\nglobal.set(\"selectedTeam\", teamId);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 170,
    "y": 460,
    "wires": [["376c7ac6132dc2a8"]]
  },
  {
    "id": "376c7ac6132dc2a8",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "determine teamId",
    "func": "\n\nvar teamId = global.get(\"selectedTeam\");\nif(teamId === 1){\n    msg.payload = \"Team 1\";\n}else if(teamId === 2){\n    msg.payload = \"Team 2\";\n}else if(teamId === 3){\n    msg.payload = \"Team 3\";\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 150,
    "y": 520,
    "wires": [["ef3583213d40645f"]]
  },
  {
    "id": "ef3583213d40645f",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "e6441943fe7b404b",
    "order": 2,
    "width": 4,
    "height": 1,
    "name": "",
    "label": "Team",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 130,
    "y": 600,
    "wires": []
  },
  {
    "id": "273897f198194a61",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Calculate Distance",
    "func": "var teamId = global.get(\"selectedTeam\");\n\n\nvar totalDistanceTeam1 = context.get('totalDistanceTeam1') || 0;\nlet latArrayTeam1 = context.get('previous_latArrayTeam1') || [];\nlet lonArrayTeam1 = context.get('previous_lonArrayTeam1') || [];\nvar totalDistanceTeam2 = context.get('totalDistanceTeam2') || 0;\nlet latArrayTeam2 = context.get('previous_latArrayTeam2') || [];\nlet lonArrayTeam2 = context.get('previous_lonArrayTeam2') || [];\nvar totalDistanceTeam3 = context.get('totalDistanceTeam3') || 0;\nlet latArrayTeam3 = context.get('previous_latArrayTeam3') || [];\nlet lonArrayTeam3 = context.get('previous_lonArrayTeam3') || [];\n\n\n\n\n\n\nif(msg.payload.sensor_type === \"position\"){\n    if(msg.payload.sensor_team === \"team_1\"){\n        const { latitude, longitude, altitude } = msg.payload.data;\n        latArrayTeam1.push(latitude);\n          if(latArrayTeam1.length > 2){\n             latArrayTeam1.shift();\n           }\n          lonArrayTeam1.push(longitude);\n          if(lonArrayTeam1.length > 2){\n             lonArrayTeam1.shift();\n}\n\n        if(latArrayTeam1.length == 2){\n           //for (var i = 1; i < latArrayTeam1.length; i++) {\n    \n    var distanceCalc = haversineDistance(latArrayTeam1[0], lonArrayTeam1[0], latArrayTeam1[1], lonArrayTeam1[1]);\n    totalDistanceTeam1 += distanceCalc;\n//}\n}\ncontext.set('totalDistance', totalDistanceTeam1);\ncontext.set('totalDistanceTeam1', totalDistanceTeam1);\n\n//totalDistanceTeam1 = totalDistanceTeam1 / 1000; // Convert to kilometers\ncontext.set('previous_latArrayTeam1', latArrayTeam1);\ncontext.set('previous_lonArrayTeam1', lonArrayTeam1);\n\n//msg.payload = {totalD: totalDistanceTeam1.toFixed(4) + \"km\",\n//            type : msg.payload.sensor_type}; // Format the payload as a string with two decimal places\n\n//        return msg;\n}\n    if (msg.payload.sensor_team === \"team_2\"){\n        const { latitude, longitude, altitude } = msg.payload.data;\n        latArrayTeam2.push(latitude);\n          if(latArrayTeam2.length > 2){\n             latArrayTeam2.shift();\n           }\n          lonArrayTeam2.push(longitude);\n          if(lonArrayTeam2.length > 2){\n             lonArrayTeam2.shift();\n}\n\n        if(latArrayTeam2.length == 2){\n           for (var i = 1; i < latArrayTeam2.length; i++) {\n    \n    var distanceCalc = haversineDistance(latArrayTeam2[0], lonArrayTeam2[0], latArrayTeam2[1], lonArrayTeam2[1]);\n    totalDistanceTeam2 += distanceCalc;\n}\n}\ncontext.set('totalDistance', totalDistanceTeam1);\ncontext.set('totalDistanceTeam2', totalDistanceTeam2);\n\n//totalDistanceTeam2 = totalDistanceTeam2 / 1000; // Convert to kilometers\ncontext.set('previous_latArrayTeam2', latArrayTeam2);\ncontext.set('previous_lonArrayTeam2', lonArrayTeam2);\n\n\n    }\n    if (msg.payload.sensor_team === \"team_3\"){\n        const { latitude, longitude, altitude } = msg.payload.data;\n        latArrayTeam3.push(latitude);\n          if(latArrayTeam3.length > 2){\n             latArrayTeam3.shift();\n           }\n          lonArrayTeam3.push(longitude);\n          if(lonArrayTeam3.length > 2){\n             lonArrayTeam3.shift();\n}\n\n        if(latArrayTeam3.length == 2){\n           for (var i = 1; i < latArrayTeam3.length; i++) {\n    \n    var distanceCalc = haversineDistance(latArrayTeam3[0], lonArrayTeam3[0], latArrayTeam3[1], lonArrayTeam3[1]);\n    totalDistanceTeam3 += distanceCalc;\n}\n}\ncontext.set('totalDistance', totalDistanceTeam3);\ncontext.set('totalDistanceTeam3', totalDistanceTeam3);\n\n//totalDistanceTeam3 = totalDistanceTeam3 / 1000; // Convert to kilometers\ncontext.set('previous_latArrayTeam3', latArrayTeam3);\ncontext.set('previous_lonArrayTeam3', lonArrayTeam3);\n\n    }\n    function haversineDistance(lat1, lon1, lat2, lon2) {\n        var R = 6371000; // Radius of the Earth in meters\n        var phi1 = toRadians(lat1);\n        var phi2 = toRadians(lat2);\n        var deltaPhi = toRadians(lat2 - lat1);\n        var deltaLambda = toRadians(lon2 - lon1);\n\n        var a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\n            Math.cos(phi1) * Math.cos(phi2) *\n            Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n        var distance = R * c;\n        return distance;\n    }\n\n    function toRadians(degrees) {\n        return degrees * Math.PI / 180;\n    }\n\n\n\n    \n\n    if (teamId === \"team_1\"){\n         msg.payload = (totalDistanceTeam1 / 1000).toFixed(2);\n\n    }else if(teamId === \"team_2\"){\n        msg.payload = (totalDistanceTeam2 / 1000).toFixed(2);\n    }else if(teamId === \"team_3\"){\n        msg.payload = (totalDistanceTeam3 / 1000).toFixed(2);\n    }else if(teamId === \"all\"){\n        msg.payload = ((totalDistanceTeam1 + totalDistanceTeam2 + totalDistanceTeam3)/1000).toFixed(2);\n    }\n    return msg;\n}\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 600,
    "wires": [["0ee146bee629ef10"]]
  },
  {
    "id": "704501cf2e5350ee",
    "type": "ui_switch",
    "z": "0875265c7a537c98",
    "name": "",
    "label": "activate anomaly",
    "tooltip": "",
    "group": "e6441943fe7b404b",
    "order": 3,
    "width": 5,
    "height": 1,
    "passthru": true,
    "decouple": "false",
    "topic": "topic",
    "topicType": "msg",
    "style": "",
    "onvalue": "true",
    "onvalueType": "bool",
    "onicon": "",
    "oncolor": "",
    "offvalue": "false",
    "offvalueType": "bool",
    "officon": "",
    "offcolor": "",
    "animate": false,
    "className": "",
    "x": 470,
    "y": 280,
    "wires": [["1e9d9202e03184b2"]]
  },
  {
    "id": "1e9d9202e03184b2",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "activate anomaly",
    "func": "var anomaly = msg.payload;\nglobal.set(\"anomaly\", anomaly);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 690,
    "y": 280,
    "wires": [[]]
  },
  {
    "id": "f986f15073422b20",
    "type": "file",
    "z": "0875265c7a537c98",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": false,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 428,
    "y": 1020,
    "wires": [[]]
  },
  {
    "id": "fcb62e7a4a9daf92",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "Cold Path",
    "func": "var sensorData = msg.payload; \n\n// Initialize context.headersWritten if it doesn't exist\ncontext.headersWritten = context.headersWritten || {};\n\nswitch(sensorData.sensor_type) {\n    case 'position':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/gps_data.csv';\n        if (!context.headersWritten.gps) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,latitude,longitude\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.latitude},${sensorData.data.longitude}`;\n            context.headersWritten.gps = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.latitude},${sensorData.data.longitude}`;\n        }\n        break;\n    case 'acceleration':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/accel_data.csv';\n        if (!context.headersWritten.acceleration) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,x,y,z\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.x},${sensorData.data.y},${sensorData.data.z}`;\n            context.headersWritten.acceleration = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.x},${sensorData.data.y},${sensorData.data.z}`;\n        }\n        break;\n    case 'speed':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/speed_data.csv';\n        if (!context.headersWritten.speed) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,speed\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.speed}`;\n            context.headersWritten.speed = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.speed}`;\n        }\n        break;\n    case 'vital_parameters':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/vital_data.csv';\n        if (!context.headersWritten.vital_parameters) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,heart_rate,body_temperature\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.heart_rate},${sensorData.data.body_temperature}`;\n            context.headersWritten.vital_parameters = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.heart_rate},${sensorData.data.body_temperature}`;\n        }\n        break;\n    default:\n        return null; // Ignore unknown sensor types\n}\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 268,
    "y": 1020,
    "wires": [["f986f15073422b20"]]
  },
  {
    "id": "f6d6a648292a1a68",
    "type": "file in",
    "z": "0875265c7a537c98",
    "name": "read acceleration",
    "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/accel_data.csv",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 790,
    "y": 1080,
    "wires": [["2602b7ec92996c90"]]
  },
  {
    "id": "59a76a9de122bd42",
    "type": "file in",
    "z": "0875265c7a537c98",
    "name": "read GPS",
    "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/gps_data.csv",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 752,
    "y": 1287,
    "wires": [["0c4056368304b8a3"]]
  },
  {
    "id": "ef0b77c1fb7b8787",
    "type": "file in",
    "z": "0875265c7a537c98",
    "name": "read vital data",
    "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/vital_data.csv",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 780,
    "y": 1480,
    "wires": [["4682201c51578535"]]
  },
  {
    "id": "d496db1b99726423",
    "type": "inject",
    "z": "0875265c7a537c98",
    "name": "Inject every 1 hour",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 1200,
    "wires": [
      [
        "f6d6a648292a1a68",
        "59a76a9de122bd42",
        "ef0b77c1fb7b8787",
        "95ec8053fb8ef314"
      ]
    ]
  },
  {
    "id": "2602b7ec92996c90",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "parse acceleration data",
    "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,x,y,z\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.x = parseFloat(values[4].trim());\n    data.y = parseFloat(values[5].trim());\n    data.z = parseFloat(values[6].trim());\n\n    // Check for valid x, y, z values\n    if (!isNaN(data.x) && !isNaN(data.y) && !isNaN(data.z)) {\n        // Calculate magnitude\n        data.magnitude = Math.sqrt(data.x * data.x + data.y * data.y + data.z * data.z);\n\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 1080,
    "wires": [["6dc5efeec191525c", "1594cf10dbc1f263"]]
  },
  {
    "id": "c426c09fd23cbfaf",
    "type": "ui_chart",
    "z": "0875265c7a537c98",
    "name": "magnitude chart",
    "group": "7b778c48129e069b",
    "order": 7,
    "width": 7,
    "height": 4,
    "label": "Magnitude Chart",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "1",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#189a51",
      "#dcafe9",
      "#ff7f0e",
      "#197619",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1712,
    "y": 1020,
    "wires": [[]]
  },
  {
    "id": "6dc5efeec191525c",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "setting magnitude payload",
    "func": "var processedData = msg.payload;\n\n// Initialize an array to hold the data for the chart\nvar chartData = [];\n\n// Iterate over the processed data to extract timestamp and magnitude\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Only process entries with calculated magnitude\n    if (data.magnitude !== undefined) {\n        chartData.push({\n            x: new Date(data.timestamp),\n            y: data.magnitude\n        });\n    }\n}\n\n// Set the processed data for the chart as the message payload\nmsg.payload = [{\n    series: [\"Magnitude\"],\n    data: [chartData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1432,
    "y": 1020,
    "wires": [["c426c09fd23cbfaf"]]
  },
  {
    "id": "0c4056368304b8a3",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "parse GPS data",
    "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,latitude,longitude\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.latitude = parseFloat(values[4].trim());\n    data.longitude = parseFloat(values[5].trim());\n\n    if (!isNaN(data.latitude) && !isNaN(data.longitude)) {\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1032,
    "y": 1287,
    "wires": [["2cf141143756e905", "73c7ccaa1df2980a"]]
  },
  {
    "id": "671c4b1d4511aaf5",
    "type": "ui_worldmap",
    "z": "0875265c7a537c98",
    "group": "7b778c48129e069b",
    "order": 20,
    "width": 17,
    "height": 5,
    "name": "GPS Map",
    "lat": "",
    "lon": "",
    "zoom": "",
    "layer": "OSMG",
    "cluster": "",
    "maxage": "",
    "usermenu": "hide",
    "layers": "hide",
    "panit": "false",
    "panlock": "false",
    "zoomlock": "false",
    "hiderightclick": "true",
    "coords": "none",
    "showgrid": "false",
    "showruler": "false",
    "allowFileDrop": "false",
    "path": "/worldmap2",
    "overlist": "DR,CO,RA,DN,HM",
    "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
    "mapname": "",
    "mapurl": "",
    "mapopt": "",
    "mapwms": false,
    "x": 1612,
    "y": 1247,
    "wires": []
  },
  {
    "id": "2cf141143756e905",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare for GPS Map",
    "func": "// Iterate over each GPS data point\nfor (var i = 0; i < msg.payload.length; i++) {\n    var data = {\n        name:msg.payload[i].sensor_team +  \" point \" + (i + 1),     // Unique name for each point\n        lat: msg.payload[i].latitude, // Latitude of the point\n        lon: msg.payload[i].longitude // Longitude of the point\n        // Optionally, you can add more properties like icon and layer\n    };\n\n    // Emit each data point individually to the Worldmap node\n    node.send({\n        payload: data\n    });\n}\n\nreturn null; // Return null to suppress the original message\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1392,
    "y": 1247,
    "wires": [["671c4b1d4511aaf5"]]
  },
  {
    "id": "73c7ccaa1df2980a",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "distance calculation",
    "func": "var gpsData = msg.payload;\nvar selectedTeam = global.get('selectedTeam');\nvar teamDistances = {};\nvar totalDistance = 0;\n\n// Helper function to calculate distance using Haversine formula\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n    var R = 6371000; // Radius of the Earth in meters\n    var phi1 = toRadians(lat1);\n    var phi2 = toRadians(lat2);\n    var deltaPhi = toRadians(lat2 - lat1);\n    var deltaLambda = toRadians(lon2 - lon1);\n\n    var a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\n        Math.cos(phi1) * Math.cos(phi2) *\n        Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c; // Distance in meters\n}\n\nfunction toRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\n// Process distances based on the selected team\nif (selectedTeam !== \"all\") {\n    // Calculate distance for the selected team only\n    for (var i = 1; i < gpsData.length; i++) {\n        var prevPoint = gpsData[i - 1];\n        var currPoint = gpsData[i];\n\n        var distance = haversineDistance(prevPoint.latitude, prevPoint.longitude, currPoint.latitude, currPoint.longitude);\n        totalDistance += distance;\n    }\n    totalDistance = totalDistance / 1000; // Convert to kilometers\n    msg.payload = totalDistance.toFixed(2) + \" km\"; // Format the payload as a string with two decimal places\n\n} else {\n    // Group data by sensor_team and calculate distances\n    gpsData.forEach(function(data) {\n        if (!teamDistances[data.sensor_team]) {\n            teamDistances[data.sensor_team] = 0;\n        }\n    });\n\n    for (var team in teamDistances) {\n        var teamData = gpsData.filter(point => point.sensor_team === team);\n        var teamDistance = 0;\n\n        for (var i = 1; i < teamData.length; i++) {\n            var prevPoint = teamData[i - 1];\n            var currPoint = teamData[i];\n\n            var distance = haversineDistance(prevPoint.latitude, prevPoint.longitude, currPoint.latitude, currPoint.longitude);\n            teamDistance += distance;\n        }\n\n        teamDistances[team] = teamDistance / 1000; // Convert to kilometers\n        totalDistance += teamDistances[team]; // Sum up the distance for all teams\n    }\n\n    msg.payload = totalDistance.toFixed(2) + \" km\"; // Format as a string with two decimal places\n}\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1372,
    "y": 1307,
    "wires": [["d5fa57ecf7a5eae3"]]
  },
  {
    "id": "d5fa57ecf7a5eae3",
    "type": "ui_text",
    "z": "0875265c7a537c98",
    "group": "7b778c48129e069b",
    "order": 22,
    "width": 7,
    "height": 3,
    "name": "",
    "label": "Distance traveled",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": 16,
    "color": "#000000",
    "x": 1672,
    "y": 1307,
    "wires": []
  },
  {
    "id": "4682201c51578535",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "parse vital data",
    "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV, starting from the second line to skip the header\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,heart_rate,body_temperature\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.heart_rate = parseInt(values[4].trim(), 10);\n    data.body_temperature = parseFloat(values[5].trim());\n\n    // Check for valid heart_rate and body_temperature values\n    if (!isNaN(data.heart_rate) && !isNaN(data.body_temperature)) {\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1000,
    "y": 1480,
    "wires": [["d4f5b3f0be98957e", "9a2365f188fb8f84", "713c7340e2ca16e0"]]
  },
  {
    "id": "d4f5b3f0be98957e",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare heart rate for line chart",
    "func": "var processedData = msg.payload;\n\n// Initialize arrays to hold the data for the heart rate chart\nvar heartRateData = [];\n\n// Iterate over the processed data to extract timestamp and heart rate\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Prepare data for heart rate chart\n    heartRateData.push({\n        x: new Date(data.timestamp),\n        y: data.heart_rate\n    });\n}\n\n// Set the processed heart rate data as the message payload\nmsg.payload = [{\n    series: [\"Heart Rate\"],\n    data: [heartRateData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1392,
    "y": 1434,
    "wires": [["3c07263f1f615c7d"]]
  },
  {
    "id": "3c07263f1f615c7d",
    "type": "ui_chart",
    "z": "0875265c7a537c98",
    "name": "",
    "group": "7b778c48129e069b",
    "order": 39,
    "width": 8,
    "height": 8,
    "label": "heart rate chart",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "3600",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1672,
    "y": 1434,
    "wires": [[]]
  },
  {
    "id": "9a2365f188fb8f84",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare body temprature for line chart",
    "func": "var processedData = msg.payload;\n\n// Initialize array to hold the data for the body temperature chart\nvar bodyTemperatureData = [];\n\n// Iterate over the processed data to extract timestamp and body temperature\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Prepare data for body temperature chart\n    bodyTemperatureData.push({\n        x: new Date(data.timestamp),\n        y: data.body_temperature\n    });\n}\n\n// Set the processed body temperature data as the message payload\nmsg.payload = [{\n    series: [\"Body Temperature\"],\n    data: [bodyTemperatureData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1432,
    "y": 1494,
    "wires": [["b41adf9f4796cd18"]]
  },
  {
    "id": "b41adf9f4796cd18",
    "type": "ui_chart",
    "z": "0875265c7a537c98",
    "name": "",
    "group": "7b778c48129e069b",
    "order": 40,
    "width": 8,
    "height": 8,
    "label": "body temprature chart",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "3600",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1760,
    "y": 1500,
    "wires": [[]]
  },
  {
    "id": "713c7340e2ca16e0",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "statistical analysis for vital data",
    "func": "var processedData = msg.payload;\n\n// Initialize arrays to hold heart rate and body temperature data\nvar heartRates = [];\nvar bodyTemperatures = [];\n\n// Iterate over processed data to extract heart rates and body temperatures\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Check if heart_rate is a valid number before collecting it\n    if (!isNaN(data.heart_rate)) {\n        heartRates.push(data.heart_rate);\n    }\n\n    // Check if body_temperature is a valid number before collecting it\n    if (!isNaN(data.body_temperature)) {\n        bodyTemperatures.push(data.body_temperature);\n    }\n}\n\n// Calculate average heart rate if the array is not empty\nvar averageHeartRate = heartRates.length > 0 ? \n    (heartRates.reduce((acc, val) => acc + val, 0) / heartRates.length).toFixed(2) : \n    \"N/A\";\n\n// Calculate maximum and minimum heart rate if the array is not empty\nvar maxHeartRate = heartRates.length > 0 ? Math.max(...heartRates) : \"N/A\";\nvar minHeartRate = heartRates.length > 0 ? Math.min(...heartRates) : \"N/A\";\n\n// Calculate average body temperature if the array is not empty\nvar averageBodyTemperature = bodyTemperatures.length > 0 ? \n    (bodyTemperatures.reduce((acc, val) => acc + val, 0) / bodyTemperatures.length).toFixed(2) : \n    \"N/A\";\n\n// Calculate maximum and minimum body temperature if the array is not empty\nvar maxBodyTemperature = bodyTemperatures.length > 0 ? Math.max(...bodyTemperatures).toFixed(2) : \"N/A\";\nvar minBodyTemperature = bodyTemperatures.length > 0 ? Math.min(...bodyTemperatures).toFixed(2) : \"N/A\";\n\n// Prepare the payload with calculated statistics\nmsg.payload = {\n    averageHeartRate: averageHeartRate,\n    maxHeartRate: maxHeartRate,\n    minHeartRate: minHeartRate,\n    averageBodyTemperature: averageBodyTemperature,\n    maxBodyTemperature: maxBodyTemperature,\n    minBodyTemperature: minBodyTemperature\n};\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1392,
    "y": 1554,
    "wires": [["1c29edf8e3f6d82f"]]
  },
  {
    "id": "1c29edf8e3f6d82f",
    "type": "ui_template",
    "z": "0875265c7a537c98",
    "group": "7b778c48129e069b",
    "name": "vital data statistical analysis template",
    "order": 29,
    "width": 9,
    "height": 5,
    "format": "<h2>Vital Statistics</h2>\n<div>\n    <p><strong>Average Heart Rate:</strong> {{msg.payload.averageHeartRate}} bpm</p>\n    <p><strong>Maximum Heart Rate:</strong> {{msg.payload.maxHeartRate}} bpm</p>\n    <p><strong>Minimum Heart Rate:</strong> {{msg.payload.minHeartRate}} bpm</p>\n    <p><strong>Average Body Temperature:</strong> {{msg.payload.averageBodyTemperature}} °C</p>\n    <p><strong>Maximum Body Temperature:</strong> {{msg.payload.maxBodyTemperature}} °C</p>\n    <p><strong>Minimum Body Temperature:</strong> {{msg.payload.minBodyTemperature}} °C</p>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1812,
    "y": 1554,
    "wires": [[]]
  },
  {
    "id": "704e21a607c9208a",
    "type": "ui_dropdown",
    "z": "0875265c7a537c98",
    "name": "",
    "label": "Select Team",
    "tooltip": "",
    "place": "Select Team",
    "group": "7b778c48129e069b",
    "order": 2,
    "width": 7,
    "height": 2,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "All teams",
        "value": "all",
        "type": "str"
      },
      {
        "label": "Team 1",
        "value": "team_1",
        "type": "str"
      },
      {
        "label": "Team 2",
        "value": "team_2",
        "type": "str"
      },
      {
        "label": "Team 3",
        "value": "team_3",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "payload",
    "topicType": "msg",
    "className": "",
    "x": 170,
    "y": 1360,
    "wires": [["929abb2f1c50843d"]]
  },
  {
    "id": "929abb2f1c50843d",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "save selected team to global context",
    "func": "// Function node to handle team selection from the dropdown\nvar teamId = msg.payload;\nglobal.set(\"selectedTeam\", teamId);\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 180,
    "y": 1420,
    "wires": [["4572c8e6b50bd6a6"]]
  },
  {
    "id": "4572c8e6b50bd6a6",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "get selected team from global context",
    "func": "var teamId = global.get(\"selectedTeam\");\nmsg.payload = teamId;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 180,
    "y": 1480,
    "wires": [["27bc2dfa2f0f6bba"]]
  },
  {
    "id": "27bc2dfa2f0f6bba",
    "type": "trigger",
    "z": "0875265c7a537c98",
    "name": "Trigger reading on team change",
    "op1": "0",
    "op2": "0",
    "op1type": "str",
    "op2type": "str",
    "duration": "250",
    "extend": false,
    "overrideDelay": false,
    "units": "ms",
    "reset": "",
    "bytopic": "all",
    "topic": "topic",
    "outputs": 1,
    "x": 180,
    "y": 1540,
    "wires": [
      [
        "f6d6a648292a1a68",
        "59a76a9de122bd42",
        "ef0b77c1fb7b8787",
        "95ec8053fb8ef314"
      ]
    ]
  },
  {
    "id": "95ec8053fb8ef314",
    "type": "file in",
    "z": "0875265c7a537c98",
    "name": "read speed",
    "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/speed_data.csv",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 772,
    "y": 1680,
    "wires": [["465384a31cd769de"]]
  },
  {
    "id": "465384a31cd769de",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "parse speed data",
    "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV, starting from the second line to skip the header\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,speed\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.speed = parseFloat(values[4].trim());\n\n    // Validate the parsed values\n    if (!isNaN(data.timestampRegular) && !isNaN(data.speed)) {\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1052,
    "y": 1680,
    "wires": [
      [
        "8f1131dbf2bee213",
        "6f152ac2a0fb2c7b",
        "174f5b02d9cd858d",
        "7c979d8a459a5010"
      ]
    ]
  },
  {
    "id": "8f1131dbf2bee213",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "calculate basic speed statistics",
    "func": "var speedData = msg.payload;\n\n// Initialize variables for calculations\nvar sumSpeed = 0;\nvar maxSpeed = -Infinity;\nvar minSpeed = Infinity;\nvar speedValues = [];\n\n// Iterate over speed data to collect statistics\nfor (var i = 0; i < speedData.length; i++) {\n    var speed = speedData[i].speed;\n\n    // Sum for average calculation\n    sumSpeed += speed;\n\n    // Check for max speed\n    if (speed > maxSpeed) {\n        maxSpeed = speed;\n    }\n\n    // Check for min speed\n    if (speed < minSpeed) {\n        minSpeed = speed;\n    }\n\n    // Collect speeds for standard deviation calculation\n    speedValues.push(speed);\n}\n\n// Calculate average speed\nvar averageSpeed = sumSpeed / speedData.length;\n\n// Calculate standard deviation\nvar mean = averageSpeed;\nvar sumSquaredDiffs = speedValues.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0);\nvar standardDeviation = Math.sqrt(sumSquaredDiffs / speedValues.length);\n\n// Prepare the payload with calculated statistics\nmsg.payload = {\n    averageSpeed: averageSpeed.toFixed(2),\n    maxSpeed: maxSpeed.toFixed(2),\n    minSpeed: minSpeed.toFixed(2),\n    standardDeviation: standardDeviation.toFixed(2)\n};\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1412,
    "y": 1717,
    "wires": [["c28ca927190513a3"]]
  },
  {
    "id": "6f152ac2a0fb2c7b",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare speed for line chart",
    "func": "var processedData = msg.payload;\n\n// Initialize an array to hold the data for the speed chart\nvar speedData = [];\n\n// Iterate over the processed data to extract timestamp and speed\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Prepare data for speed chart\n    speedData.push({\n        x: new Date(data.timestamp),\n        y: data.speed\n    });\n}\n\n// Set the processed speed data as the message payload\nmsg.payload = [{\n    series: [\"Speed\"],\n    data: [speedData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1400,
    "y": 1660,
    "wires": [["926a2025edef498d"]]
  },
  {
    "id": "926a2025edef498d",
    "type": "ui_chart",
    "z": "0875265c7a537c98",
    "name": "",
    "group": "7b778c48129e069b",
    "order": 19,
    "width": 17,
    "height": 6,
    "label": "speed chart",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "3600",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1652,
    "y": 1657,
    "wires": [[]]
  },
  {
    "id": "c28ca927190513a3",
    "type": "ui_template",
    "z": "0875265c7a537c98",
    "group": "7b778c48129e069b",
    "name": "speed statistics template",
    "order": 17,
    "width": 6,
    "height": 4,
    "format": "<!-- UI Template Node for Displaying Speed Statistics -->\n<div style=\"text-align: center;\">\n    <h2>Speed Statistics</h2>\n    <p><strong>Average Speed:</strong> {{msg.payload.averageSpeed}} m/s</p>\n    <p><strong>Max Speed:</strong> {{msg.payload.maxSpeed}} m/s</p>\n    <p><strong>Min Speed:</strong> {{msg.payload.minSpeed}} m/s</p>\n    <p><strong>Standard Deviation:</strong> {{msg.payload.standardDeviation}} m/s</p>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1750,
    "y": 1720,
    "wires": [[]]
  },
  {
    "id": "174f5b02d9cd858d",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "average speed by hour",
    "func": "var speedData = msg.payload;\nvar hourlySpeeds = {};\n\n// Aggregate speeds by hour\nfor (var i = 0; i < speedData.length; i++) {\n    var timestamp = new Date(speedData[i].timestamp);\n    var hour = timestamp.getUTCHours();\n    if (!hourlySpeeds[hour]) {\n        hourlySpeeds[hour] = { sumSpeed: 0, count: 0 };\n    }\n    hourlySpeeds[hour].sumSpeed += speedData[i].speed;\n    hourlySpeeds[hour].count += 1;\n}\n\n// Calculate average speed for each hour\nvar averageHourlySpeeds = [];\nfor (var hourStr in hourlySpeeds) {\n    var hour = parseInt(hourStr); // Ensure hour is treated as a number\n    var avgSpeed = hourlySpeeds[hour].sumSpeed / hourlySpeeds[hour].count;\n    averageHourlySpeeds.push({ hour: hour, averageSpeed: avgSpeed.toFixed(2) });\n}\n\n// Set the average hourly speeds as the message payload\nmsg.payload = averageHourlySpeeds;\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1380,
    "y": 1780,
    "wires": [["5e3b18d61da9cca2"]]
  },
  {
    "id": "5e3b18d61da9cca2",
    "type": "ui_template",
    "z": "0875265c7a537c98",
    "group": "7b778c48129e069b",
    "name": "average speed by hour template",
    "order": 18,
    "width": 5,
    "height": 4,
    "format": "<table style=\"width:100%; border: 1px solid black; border-collapse: collapse;\">\n    <tr>\n        <th style=\"border: 1px solid black; padding: 5px;\">Hour</th>\n        <th style=\"border: 1px solid black; padding: 5px;\">Average Speed (km/h)</th>\n    </tr>\n    <tr ng-repeat=\"item in msg.payload\">\n        <td style=\"border: 1px solid black; padding: 5px;\">{{ item.hour }}</td>\n        <td style=\"border: 1px solid black; padding: 5px;\">{{ item.averageSpeed }}</td>\n    </tr>\n</table>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1780,
    "y": 1780,
    "wires": [[]]
  },
  {
    "id": "7c979d8a459a5010",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "activity recognition (threshold-based)",
    "func": "// Function node for activity recognition (threshold-based)\nvar data = msg.payload;\n\n// Initialize counters for each activity\nvar walkingCount = 0;\nvar runningCount = 0;\nvar sprintingCount = 0;\n\n// Realistic thresholds based on typical speed ranges (m/s)\nvar walkingThreshold = 8;  // Speed < 8 m/s for walking\nvar runningThreshold = 16;  // Speed between 8 and 16 m/s for running\n\nfor (var i = 0; i < data.length; i++) {\n    var speed = parseFloat(data[i].speed);\n    \n    // Classify activities based on thresholds\n    if (speed < walkingThreshold) {\n        data[i].activity = \"Walking\";\n        walkingCount++;\n    } else if (speed >= walkingThreshold && speed < runningThreshold) {\n        data[i].activity = \"Running\";\n        runningCount++;\n    } else {\n        data[i].activity = \"Sprinting\";\n        sprintingCount++;\n    }\n}\n\n// Calculate percentages\nvar totalCount = walkingCount + runningCount + sprintingCount;\nvar walkingPercentage = (totalCount > 0) ? (walkingCount / totalCount) * 100 : 0;\nvar runningPercentage = (totalCount > 0) ? (runningCount / totalCount) * 100 : 0;\nvar sprintingPercentage = (totalCount > 0) ? (sprintingCount / totalCount) * 100 : 0;\n\n// Add the counts and percentages to the message payload\nmsg.payload = {\n    data: data,\n    counts: {\n        walking: walkingCount,\n        running: runningCount,\n        sprinting: sprintingCount\n    },\n    percentages: {\n        walking: walkingPercentage.toFixed(2),\n        running: runningPercentage.toFixed(2),\n        sprinting: sprintingPercentage.toFixed(2)\n    }\n};\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1460,
    "y": 1920,
    "wires": [["cc2b5a311983c1d3", "74aeb0a53f8acc90", "9c71851b99a7db09"]]
  },
  {
    "id": "bc07b15bc4cf1928",
    "type": "ui_chart",
    "z": "0875265c7a537c98",
    "name": "speed activity distribution",
    "group": "7b778c48129e069b",
    "order": 16,
    "width": 6,
    "height": 4,
    "label": "Speed Activity Distribution",
    "chartType": "pie",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "3600",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#195886",
      "#3c7317",
      "#fd6a08",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 2168,
    "y": 1920,
    "wires": [[]]
  },
  {
    "id": "9c71851b99a7db09",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare sprinting data for pie chart",
    "func": "// Function node to prepare data for the pie chart\nvar percentages = msg.payload.percentages;\n\nmsg.payload = percentages.sprinting;\nmsg.topic = \"Sprinting\";\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1820,
    "y": 1980,
    "wires": [["bc07b15bc4cf1928"]]
  },
  {
    "id": "cc2b5a311983c1d3",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare walking data for pie chart",
    "func": "// Function node to prepare data for the pie chart\nvar percentages = msg.payload.percentages;\n\nmsg.payload = percentages.walking;\nmsg.topic = \"Walking\";\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1820,
    "y": 1860,
    "wires": [["bc07b15bc4cf1928"]]
  },
  {
    "id": "74aeb0a53f8acc90",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "prepare running data for pie chart",
    "func": "// Function node to prepare data for the pie chart\nvar percentages = msg.payload.percentages;\n\nmsg.payload = percentages.running;\nmsg.topic = \"Running\";\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1820,
    "y": 1920,
    "wires": [["bc07b15bc4cf1928"]]
  },
  {
    "id": "1594cf10dbc1f263",
    "type": "function",
    "z": "0875265c7a537c98",
    "name": "statstical analysis for acceleration data",
    "func": "// Function node for statistical analysis\nvar data = msg.payload;\n\n// Helper function to calculate median\nfunction median(values) {\n    if (values.length === 0) return 0;\n    values.sort(function(a, b) {\n        return a - b;\n    });\n    var half = Math.floor(values.length / 2);\n    if (values.length % 2) {\n        return values[half];\n    } else {\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n}\n\n// Initialize arrays to hold values for each axis and magnitude\nvar xValues = [];\nvar yValues = [];\nvar zValues = [];\nvar magnitudeValues = [];\n\n// Populate arrays with data\nfor (var i = 0; i < data.length; i++) {\n    xValues.push(data[i].x);\n    yValues.push(data[i].y);\n    zValues.push(data[i].z);\n    magnitudeValues.push(data[i].magnitude);\n}\n\n// Function to calculate mean\nfunction mean(values) {\n    var sum = values.reduce((a, b) => a + b, 0);\n    return sum / values.length;\n}\n\n// Function to calculate variance\nfunction variance(values, meanValue) {\n    return values.reduce((a, b) => a + Math.pow(b - meanValue, 2), 0) / values.length;\n}\n\n// Calculate statistics for each axis and magnitude\nvar meanX = mean(xValues);\nvar meanY = mean(yValues);\nvar meanZ = mean(zValues);\nvar meanMagnitude = mean(magnitudeValues);\n\nvar varianceX = variance(xValues, meanX);\nvar varianceY = variance(yValues, meanY);\nvar varianceZ = variance(zValues, meanZ);\nvar varianceMagnitude = variance(magnitudeValues, meanMagnitude);\n\nvar stdDevX = Math.sqrt(varianceX);\nvar stdDevY = Math.sqrt(varianceY);\nvar stdDevZ = Math.sqrt(varianceZ);\nvar stdDevMagnitude = Math.sqrt(varianceMagnitude);\n\nvar medianX = median(xValues);\nvar medianY = median(yValues);\nvar medianZ = median(zValues);\nvar medianMagnitude = median(magnitudeValues);\n\n// Add statistics to the message payload\nmsg.payload = {\n    mean: {\n        x: meanX.toFixed(2),\n        y: meanY.toFixed(2),\n        z: meanZ.toFixed(2),\n        magnitude: meanMagnitude.toFixed(2)\n    },\n    median: {\n        x: medianX.toFixed(2),\n        y: medianY.toFixed(2),\n        z: medianZ.toFixed(2),\n        magnitude: medianMagnitude.toFixed(2)\n    },\n    variance: {\n        x: varianceX.toFixed(2),\n        y: varianceY.toFixed(2),\n        z: varianceZ.toFixed(2),\n        magnitude: varianceMagnitude.toFixed(2)\n    },\n    stdDev: {\n        x: stdDevX.toFixed(2),\n        y: stdDevY.toFixed(2),\n        z: stdDevZ.toFixed(2),\n        magnitude: stdDevMagnitude.toFixed(2)\n    }\n};\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1470,
    "y": 1120,
    "wires": [["f93e6739d32c9a5f"]]
  },
  {
    "id": "f93e6739d32c9a5f",
    "type": "ui_template",
    "z": "0875265c7a537c98",
    "group": "7b778c48129e069b",
    "name": "",
    "order": 15,
    "width": 17,
    "height": 3,
    "format": "<table border=\"1\" style=\"width:100%; border-collapse: collapse;\">\n    <thead>\n        <tr>\n            <th>Acceleration Statistic</th>\n            <th>X</th>\n            <th>Y</th>\n            <th>Z</th>\n            <th>Magnitude</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Mean</td>\n            <td>{{msg.payload.mean.x}}</td>\n            <td>{{msg.payload.mean.y}}</td>\n            <td>{{msg.payload.mean.z}}</td>\n            <td>{{msg.payload.mean.magnitude}}</td>\n        </tr>\n        <tr>\n            <td>Median</td>\n            <td>{{msg.payload.median.x}}</td>\n            <td>{{msg.payload.median.y}}</td>\n            <td>{{msg.payload.median.z}}</td>\n            <td>{{msg.payload.median.magnitude}}</td>\n        </tr>\n        <tr>\n            <td>Variance</td>\n            <td>{{msg.payload.variance.x}}</td>\n            <td>{{msg.payload.variance.y}}</td>\n            <td>{{msg.payload.variance.z}}</td>\n            <td>{{msg.payload.variance.magnitude}}</td>\n        </tr>\n        <tr>\n            <td>Standard Deviation</td>\n            <td>{{msg.payload.stdDev.x}}</td>\n            <td>{{msg.payload.stdDev.y}}</td>\n            <td>{{msg.payload.stdDev.z}}</td>\n            <td>{{msg.payload.stdDev.magnitude}}</td>\n        </tr>\n    </tbody>\n</table>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1732,
    "y": 1120,
    "wires": [[]]
  },
  {
    "id": "f6f382a359f92b44",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 9,
    "width": 9,
    "height": 1
  },
  {
    "id": "c22ccf20483f3b42",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 10,
    "width": 9,
    "height": 1
  },
  {
    "id": "261366fd5edf0ee4",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 11,
    "width": 9,
    "height": 1
  },
  {
    "id": "8f55f94bdcdf857b",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 16,
    "width": 17,
    "height": 1
  },
  {
    "id": "66b52de413e0a8af",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 17,
    "width": 17,
    "height": 1
  },
  {
    "id": "4770436df7b20f85",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 18,
    "width": 17,
    "height": 1
  },
  {
    "id": "3624966f2d008346",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 19,
    "width": 17,
    "height": 1
  },
  {
    "id": "b245782227fb4aa7",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 22,
    "width": 8,
    "height": 1
  },
  {
    "id": "99c86a310cfaec72",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 24,
    "width": 8,
    "height": 1
  },
  {
    "id": "e0ee49b471f1bdf5",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 26,
    "width": 8,
    "height": 1
  },
  {
    "id": "63bde194d83d9648",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 27,
    "width": 17,
    "height": 1
  },
  {
    "id": "26a10d65da3d28bf",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 28,
    "width": 17,
    "height": 1
  },
  {
    "id": "d29772eb4c635345",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "e6441943fe7b404b",
    "order": 29,
    "width": 17,
    "height": 1
  },
  {
    "id": "539cb1062552a210",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 1,
    "width": 5,
    "height": 1
  },
  {
    "id": "4452b0cd7eef3359",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 3,
    "width": 5,
    "height": 1
  },
  {
    "id": "83df9cb291bbcfcf",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 4,
    "width": 5,
    "height": 1
  },
  {
    "id": "e00110fd10995907",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 5,
    "width": 5,
    "height": 1
  },
  {
    "id": "987718eaf5c90a2a",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 6,
    "width": 5,
    "height": 1
  },
  {
    "id": "4df24685e12ef7f1",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 8,
    "width": 5,
    "height": 1
  },
  {
    "id": "55f0b755e491d7e5",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 9,
    "width": 5,
    "height": 1
  },
  {
    "id": "affd3d654170ca01",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 10,
    "width": 5,
    "height": 1
  },
  {
    "id": "c25ac3f7ea70e9b9",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 11,
    "width": 5,
    "height": 1
  },
  {
    "id": "9c1754465793a913",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 12,
    "width": 5,
    "height": 1
  },
  {
    "id": "1266bd846bba8b08",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 13,
    "width": 5,
    "height": 1
  },
  {
    "id": "54730d17a7854737",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 14,
    "width": 5,
    "height": 1
  },
  {
    "id": "a149f79b4546a759",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 21,
    "width": 5,
    "height": 1
  },
  {
    "id": "eee693616ee474e0",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 23,
    "width": 5,
    "height": 1
  },
  {
    "id": "4eb30a39464de9d8",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 24,
    "width": 5,
    "height": 1
  },
  {
    "id": "c33bca45beb75a7b",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 25,
    "width": 5,
    "height": 1
  },
  {
    "id": "7142dc5b28724818",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 26,
    "width": 5,
    "height": 1
  },
  {
    "id": "65d6ece12dd59e52",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 27,
    "width": 5,
    "height": 1
  },
  {
    "id": "83c51659e03294f9",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 28,
    "width": 4,
    "height": 1
  },
  {
    "id": "3bee80da1a74c7c3",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 30,
    "width": 4,
    "height": 1
  },
  {
    "id": "c81305831543c6f1",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 31,
    "width": 4,
    "height": 1
  },
  {
    "id": "2aec77816c920e40",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 32,
    "width": 4,
    "height": 1
  },
  {
    "id": "63882417462a5b5d",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 33,
    "width": 4,
    "height": 1
  },
  {
    "id": "b06dd699b3d0df8a",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 34,
    "width": 4,
    "height": 1
  },
  {
    "id": "9e6477c52f167d60",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 35,
    "width": 4,
    "height": 1
  },
  {
    "id": "655bf3043da52e57",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 36,
    "width": 4,
    "height": 1
  },
  {
    "id": "491d808652be6c44",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 37,
    "width": 4,
    "height": 1
  },
  {
    "id": "2e1d81f72f53324b",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 38,
    "width": 4,
    "height": 1
  },
  {
    "id": "61ac3d9a3ff4188c",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 41,
    "width": 1,
    "height": 1
  },
  {
    "id": "5fef55ec46b8e46c",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 42,
    "width": 1,
    "height": 1
  },
  {
    "id": "b101117bc40f9203",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 43,
    "width": 1,
    "height": 1
  },
  {
    "id": "6487532da04da28e",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 44,
    "width": 1,
    "height": 1
  },
  {
    "id": "63583fa82407dda5",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 45,
    "width": 1,
    "height": 1
  },
  {
    "id": "683289272036b7f4",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 46,
    "width": 1,
    "height": 1
  },
  {
    "id": "5fdd05b2a9bd93bb",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 47,
    "width": 1,
    "height": 1
  },
  {
    "id": "074707f6ac9d4ca2",
    "type": "ui_spacer",
    "z": "0875265c7a537c98",
    "name": "spacer",
    "group": "7b778c48129e069b",
    "order": 48,
    "width": 1,
    "height": 1
  },
  {
    "id": "37464be6e8cb6157",
    "type": "mqtt-broker",
    "name": "",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "autoUnsubscribe": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closeRetain": "false",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willRetain": "false",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "e6441943fe7b404b",
    "type": "ui_group",
    "name": "Hot Path",
    "tab": "60eb87a55acad866",
    "order": 1,
    "disp": true,
    "width": "25",
    "collapse": false,
    "className": ""
  },
  {
    "id": "7b778c48129e069b",
    "type": "ui_group",
    "name": "Cold Path",
    "tab": "c67b592948628c69",
    "order": 2,
    "disp": true,
    "width": 17,
    "collapse": false,
    "className": ""
  },
  {
    "id": "60eb87a55acad866",
    "type": "ui_tab",
    "name": "Hot Path Dashboard",
    "icon": "dashboard",
    "order": 2,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "c67b592948628c69",
    "type": "ui_tab",
    "name": "Cold Path Dashboard",
    "icon": "dashboard",
    "order": 2,
    "disabled": false,
    "hidden": false
  }
]
