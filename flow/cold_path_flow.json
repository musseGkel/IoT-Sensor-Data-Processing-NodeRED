[
    {
        "id": "ca49d97b508754c7",
        "type": "tab",
        "label": "IoT-Sensor-Data-Processing-NodeRED",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9af9a580c406e70f",
        "type": "file in",
        "z": "ca49d97b508754c7",
        "name": "read acceleration",
        "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/accel_data.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1562,
        "y": 1300,
        "wires": [
            [
                "60d094aa494770a4"
            ]
        ]
    },
    {
        "id": "06ef1183c42cf596",
        "type": "file in",
        "z": "ca49d97b508754c7",
        "name": "read GPS",
        "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/gps_data.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1532,
        "y": 1507,
        "wires": [
            [
                "5c6a8ba62738bf71"
            ]
        ]
    },
    {
        "id": "b5948bfad23ec8bc",
        "type": "file in",
        "z": "ca49d97b508754c7",
        "name": "read vital data",
        "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/vital_data.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1560,
        "y": 1694,
        "wires": [
            [
                "c33bf6f0efa0750d"
            ]
        ]
    },
    {
        "id": "cb4c6bc77392d309",
        "type": "inject",
        "z": "ca49d97b508754c7",
        "name": "Inject every 1 hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "9af9a580c406e70f",
                "06ef1183c42cf596",
                "b5948bfad23ec8bc",
                "1c6e1cbd72b836f2"
            ]
        ]
    },
    {
        "id": "60d094aa494770a4",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "parse acceleration data",
        "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,x,y,z\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.x = parseFloat(values[4].trim());\n    data.y = parseFloat(values[5].trim());\n    data.z = parseFloat(values[6].trim());\n\n    // Check for valid x, y, z values\n    if (!isNaN(data.x) && !isNaN(data.y) && !isNaN(data.z)) {\n        // Calculate magnitude\n        data.magnitude = Math.sqrt(data.x * data.x + data.y * data.y + data.z * data.z);\n\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1300,
        "wires": [
            [
                "84943a813620fa18",
                "75730111f9c92b64"
            ]
        ]
    },
    {
        "id": "3e86a52095b2c866",
        "type": "ui_chart",
        "z": "ca49d97b508754c7",
        "name": "magnitude chart",
        "group": "7b778c48129e069b",
        "order": 7,
        "width": 7,
        "height": 4,
        "label": "Magnitude Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#189a51",
            "#dcafe9",
            "#ff7f0e",
            "#197619",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2472,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "84943a813620fa18",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "setting magnitude payload",
        "func": "var processedData = msg.payload;\n\n// Initialize an array to hold the data for the chart\nvar chartData = [];\n\n// Iterate over the processed data to extract timestamp and magnitude\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Only process entries with calculated magnitude\n    if (data.magnitude !== undefined) {\n        chartData.push({\n            x: new Date(data.timestamp),\n            y: data.magnitude\n        });\n    }\n}\n\n// Set the processed data for the chart as the message payload\nmsg.payload = [{\n    series: [\"Magnitude\"],\n    data: [chartData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2162,
        "y": 1240,
        "wires": [
            [
                "3e86a52095b2c866"
            ]
        ]
    },
    {
        "id": "5c6a8ba62738bf71",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "parse GPS data",
        "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,latitude,longitude\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.latitude = parseFloat(values[4].trim());\n    data.longitude = parseFloat(values[5].trim());\n\n    if (!isNaN(data.latitude) && !isNaN(data.longitude)) {\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1792,
        "y": 1507,
        "wires": [
            [
                "b58cc88a458d0045",
                "031e390006df7eee"
            ]
        ]
    },
    {
        "id": "2d91ccd6275632e8",
        "type": "ui_worldmap",
        "z": "ca49d97b508754c7",
        "group": "7b778c48129e069b",
        "order": 20,
        "width": 17,
        "height": 5,
        "name": "GPS Map",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2392,
        "y": 1467,
        "wires": []
    },
    {
        "id": "b58cc88a458d0045",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare for GPS Map",
        "func": "// Iterate over each GPS data point\nfor (var i = 0; i < msg.payload.length; i++) {\n    var data = {\n        name:msg.payload[i].sensor_team +  \" point \" + (i + 1),     // Unique name for each point\n        lat: msg.payload[i].latitude, // Latitude of the point\n        lon: msg.payload[i].longitude // Longitude of the point\n        // Optionally, you can add more properties like icon and layer\n    };\n\n    // Emit each data point individually to the Worldmap node\n    node.send({\n        payload: data\n    });\n}\n\nreturn null; // Return null to suppress the original message\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2132,
        "y": 1467,
        "wires": [
            [
                "2d91ccd6275632e8"
            ]
        ]
    },
    {
        "id": "031e390006df7eee",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "distance calculation",
        "func": "var gpsData = msg.payload;\nvar selectedTeam = global.get('selectedTeam');\nvar teamDistances = {};\nvar totalDistance = 0;\n\n// Helper function to calculate distance using Haversine formula\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n    var R = 6371000; // Radius of the Earth in meters\n    var phi1 = toRadians(lat1);\n    var phi2 = toRadians(lat2);\n    var deltaPhi = toRadians(lat2 - lat1);\n    var deltaLambda = toRadians(lon2 - lon1);\n\n    var a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\n        Math.cos(phi1) * Math.cos(phi2) *\n        Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c; // Distance in meters\n}\n\nfunction toRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\n// Process distances based on the selected team\nif (selectedTeam !== \"all\") {\n    // Calculate distance for the selected team only\n    for (var i = 1; i < gpsData.length; i++) {\n        var prevPoint = gpsData[i - 1];\n        var currPoint = gpsData[i];\n\n        var distance = haversineDistance(prevPoint.latitude, prevPoint.longitude, currPoint.latitude, currPoint.longitude);\n        totalDistance += distance;\n    }\n    totalDistance = totalDistance / 1000; // Convert to kilometers\n    msg.payload = totalDistance.toFixed(2) + \" km\"; // Format the payload as a string with two decimal places\n\n} else {\n    // Group data by sensor_team and calculate distances\n    gpsData.forEach(function(data) {\n        if (!teamDistances[data.sensor_team]) {\n            teamDistances[data.sensor_team] = 0;\n        }\n    });\n\n    for (var team in teamDistances) {\n        var teamData = gpsData.filter(point => point.sensor_team === team);\n        var teamDistance = 0;\n\n        for (var i = 1; i < teamData.length; i++) {\n            var prevPoint = teamData[i - 1];\n            var currPoint = teamData[i];\n\n            var distance = haversineDistance(prevPoint.latitude, prevPoint.longitude, currPoint.latitude, currPoint.longitude);\n            teamDistance += distance;\n        }\n\n        teamDistances[team] = teamDistance / 1000; // Convert to kilometers\n        totalDistance += teamDistances[team]; // Sum up the distance for all teams\n    }\n\n    msg.payload = totalDistance.toFixed(2) + \" km\"; // Format as a string with two decimal places\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2122,
        "y": 1527,
        "wires": [
            [
                "0c67e298cfaf0cde"
            ]
        ]
    },
    {
        "id": "0c67e298cfaf0cde",
        "type": "ui_text",
        "z": "ca49d97b508754c7",
        "group": "7b778c48129e069b",
        "order": 22,
        "width": 7,
        "height": 3,
        "name": "",
        "label": "Distance traveled",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2422,
        "y": 1527,
        "wires": []
    },
    {
        "id": "c33bf6f0efa0750d",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "parse vital data",
        "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV, starting from the second line to skip the header\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,heart_rate,body_temperature\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.heart_rate = parseInt(values[4].trim(), 10);\n    data.body_temperature = parseFloat(values[5].trim());\n\n    // Check for valid heart_rate and body_temperature values\n    if (!isNaN(data.heart_rate) && !isNaN(data.body_temperature)) {\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1694,
        "wires": [
            [
                "dc85603680729750",
                "195b06f4bd7e4d66",
                "0ab4bd1de5650153"
            ]
        ]
    },
    {
        "id": "dc85603680729750",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare heart rate for line chart",
        "func": "var processedData = msg.payload;\n\n// Initialize arrays to hold the data for the heart rate chart\nvar heartRateData = [];\n\n// Iterate over the processed data to extract timestamp and heart rate\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Prepare data for heart rate chart\n    heartRateData.push({\n        x: new Date(data.timestamp),\n        y: data.heart_rate\n    });\n}\n\n// Set the processed heart rate data as the message payload\nmsg.payload = [{\n    series: [\"Heart Rate\"],\n    data: [heartRateData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2102,
        "y": 1654,
        "wires": [
            [
                "9e78eaac52b44f19"
            ]
        ]
    },
    {
        "id": "9e78eaac52b44f19",
        "type": "ui_chart",
        "z": "ca49d97b508754c7",
        "name": "",
        "group": "7b778c48129e069b",
        "order": 28,
        "width": 8,
        "height": 8,
        "label": "heart rate chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2432,
        "y": 1654,
        "wires": [
            []
        ]
    },
    {
        "id": "195b06f4bd7e4d66",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare body temprature for line chart",
        "func": "var processedData = msg.payload;\n\n// Initialize array to hold the data for the body temperature chart\nvar bodyTemperatureData = [];\n\n// Iterate over the processed data to extract timestamp and body temperature\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Prepare data for body temperature chart\n    bodyTemperatureData.push({\n        x: new Date(data.timestamp),\n        y: data.body_temperature\n    });\n}\n\n// Set the processed body temperature data as the message payload\nmsg.payload = [{\n    series: [\"Body Temperature\"],\n    data: [bodyTemperatureData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2122,
        "y": 1714,
        "wires": [
            [
                "55079e3f6fa8e005"
            ]
        ]
    },
    {
        "id": "55079e3f6fa8e005",
        "type": "ui_chart",
        "z": "ca49d97b508754c7",
        "name": "",
        "group": "7b778c48129e069b",
        "order": 30,
        "width": 8,
        "height": 8,
        "label": "body temprature chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2452,
        "y": 1714,
        "wires": [
            []
        ]
    },
    {
        "id": "0ab4bd1de5650153",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "statistical analysis for vital data",
        "func": "var processedData = msg.payload;\n\n// Initialize arrays to hold heart rate and body temperature data\nvar heartRates = [];\nvar bodyTemperatures = [];\n\n// Iterate over processed data to extract heart rates and body temperatures\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Check if heart_rate is a valid number before collecting it\n    if (!isNaN(data.heart_rate)) {\n        heartRates.push(data.heart_rate);\n    }\n\n    // Check if body_temperature is a valid number before collecting it\n    if (!isNaN(data.body_temperature)) {\n        bodyTemperatures.push(data.body_temperature);\n    }\n}\n\n// Calculate average heart rate if the array is not empty\nvar averageHeartRate = heartRates.length > 0 ? \n    (heartRates.reduce((acc, val) => acc + val, 0) / heartRates.length).toFixed(2) : \n    \"N/A\";\n\n// Calculate maximum and minimum heart rate if the array is not empty\nvar maxHeartRate = heartRates.length > 0 ? Math.max(...heartRates) : \"N/A\";\nvar minHeartRate = heartRates.length > 0 ? Math.min(...heartRates) : \"N/A\";\n\n// Calculate average body temperature if the array is not empty\nvar averageBodyTemperature = bodyTemperatures.length > 0 ? \n    (bodyTemperatures.reduce((acc, val) => acc + val, 0) / bodyTemperatures.length).toFixed(2) : \n    \"N/A\";\n\n// Calculate maximum and minimum body temperature if the array is not empty\nvar maxBodyTemperature = bodyTemperatures.length > 0 ? Math.max(...bodyTemperatures).toFixed(2) : \"N/A\";\nvar minBodyTemperature = bodyTemperatures.length > 0 ? Math.min(...bodyTemperatures).toFixed(2) : \"N/A\";\n\n// Prepare the payload with calculated statistics\nmsg.payload = {\n    averageHeartRate: averageHeartRate,\n    maxHeartRate: maxHeartRate,\n    minHeartRate: minHeartRate,\n    averageBodyTemperature: averageBodyTemperature,\n    maxBodyTemperature: maxBodyTemperature,\n    minBodyTemperature: minBodyTemperature\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2102,
        "y": 1774,
        "wires": [
            [
                "3e46adb742469bae"
            ]
        ]
    },
    {
        "id": "3e46adb742469bae",
        "type": "ui_template",
        "z": "ca49d97b508754c7",
        "group": "7b778c48129e069b",
        "name": "vital data statistical analysis template",
        "order": 39,
        "width": 8,
        "height": 5,
        "format": "<h2>Vital Statistics</h2>\n<div>\n    <p><strong>Average Heart Rate:</strong> {{msg.payload.averageHeartRate}} bpm</p>\n    <p><strong>Maximum Heart Rate:</strong> {{msg.payload.maxHeartRate}} bpm</p>\n    <p><strong>Minimum Heart Rate:</strong> {{msg.payload.minHeartRate}} bpm</p>\n    <p><strong>Average Body Temperature:</strong> {{msg.payload.averageBodyTemperature}} °C</p>\n    <p><strong>Maximum Body Temperature:</strong> {{msg.payload.maxBodyTemperature}} °C</p>\n    <p><strong>Minimum Body Temperature:</strong> {{msg.payload.minBodyTemperature}} °C</p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2502,
        "y": 1774,
        "wires": [
            []
        ]
    },
    {
        "id": "5cabb66019921dc4",
        "type": "ui_dropdown",
        "z": "ca49d97b508754c7",
        "name": "",
        "label": "Select Team",
        "tooltip": "",
        "place": "Select Team",
        "group": "7b778c48129e069b",
        "order": 2,
        "width": 7,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All teams",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Team 1",
                "value": "team_1",
                "type": "str"
            },
            {
                "label": "Team 2",
                "value": "team_2",
                "type": "str"
            },
            {
                "label": "Team 3",
                "value": "team_3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 870,
        "y": 1580,
        "wires": [
            [
                "55ae92f69b90ac37"
            ]
        ]
    },
    {
        "id": "55ae92f69b90ac37",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "save selected team to global context",
        "func": "// Function node to handle team selection from the dropdown\nvar teamId = msg.payload;\nglobal.set(\"selectedTeam\", teamId);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1640,
        "wires": [
            [
                "75b003138847982a"
            ]
        ]
    },
    {
        "id": "75b003138847982a",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "get selected team from global context",
        "func": "var teamId = global.get(\"selectedTeam\");\nmsg.payload = teamId;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1700,
        "wires": [
            [
                "e44c9733cf714319"
            ]
        ]
    },
    {
        "id": "e44c9733cf714319",
        "type": "trigger",
        "z": "ca49d97b508754c7",
        "name": "Trigger reading on team change",
        "op1": "0",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 1760,
        "wires": [
            [
                "b5948bfad23ec8bc",
                "9af9a580c406e70f",
                "06ef1183c42cf596",
                "1c6e1cbd72b836f2"
            ]
        ]
    },
    {
        "id": "1c6e1cbd72b836f2",
        "type": "file in",
        "z": "ca49d97b508754c7",
        "name": "read speed",
        "filename": "/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/speed_data.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1542,
        "y": 1900,
        "wires": [
            [
                "69ede8a645c7ac28"
            ]
        ]
    },
    {
        "id": "af225e0dcccf5096",
        "type": "file",
        "z": "ca49d97b508754c7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 500,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "47aa01e907a599ea",
        "type": "mqtt in",
        "z": "ca49d97b508754c7",
        "name": "",
        "topic": "team/sensors",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "37464be6e8cb6157",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 500,
        "wires": [
            [
                "51f74d22d63a78e1"
            ]
        ]
    },
    {
        "id": "51f74d22d63a78e1",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "Cold Path",
        "func": "var sensorData = msg.payload; \n\n// Initialize context.headersWritten if it doesn't exist\ncontext.headersWritten = context.headersWritten || {};\n\nswitch(sensorData.sensor_type) {\n    case 'position':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/gps_data.csv';\n        if (!context.headersWritten.gps) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,latitude,longitude\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.latitude},${sensorData.data.longitude}`;\n            context.headersWritten.gps = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.latitude},${sensorData.data.longitude}`;\n        }\n        break;\n    case 'acceleration':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/accel_data.csv';\n        if (!context.headersWritten.acceleration) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,x,y,z\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.x},${sensorData.data.y},${sensorData.data.z}`;\n            context.headersWritten.acceleration = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.x},${sensorData.data.y},${sensorData.data.z}`;\n        }\n        break;\n    case 'speed':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/speed_data.csv';\n        if (!context.headersWritten.speed) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,speed\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.speed}`;\n            context.headersWritten.speed = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.speed}`;\n        }\n        break;\n    case 'vital_parameters':\n        msg.filename = '/home/musse/Documents/Class/IOT/Final Project/IoT-Sensor-Data-Processing-NodeRED/batch/vital_data.csv';\n        if (!context.headersWritten.vital_parameters) {\n            msg.payload = `timestamp,timestampRegular,sensor_id,sensor_team,heart_rate,body_temperature\\n${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.heart_rate},${sensorData.data.body_temperature}`;\n            context.headersWritten.vital_parameters = true;\n        } else {\n            msg.payload = `${sensorData.timestamp},${sensorData.timestampRegular},${sensorData.sensor_id},${sensorData.sensor_team},${sensorData.data.heart_rate},${sensorData.data.body_temperature}`;\n        }\n        break;\n    default:\n        return null; // Ignore unknown sensor types\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 500,
        "wires": [
            [
                "af225e0dcccf5096"
            ]
        ]
    },
    {
        "id": "69ede8a645c7ac28",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "parse speed data",
        "func": "var csvData = msg.payload;\nvar lines = csvData.split('\\n');\nvar selectedTeam = global.get('selectedTeam');\n\n// Initialize an array to hold the processed data\nvar processedData = [];\n\n// Iterate over each line of the CSV, starting from the second line to skip the header\nfor (var i = 1; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line === '') continue; // Skip empty lines\n\n    var values = line.split(',');\n    var data = {};\n\n    // Assuming the CSV format: timestamp,timestampRegular,sensor_id,sensor_team,speed\n    data.timestamp = values[0].trim();\n    data.timestampRegular = parseInt(values[1].trim(), 10); // Assuming timestampRegular is an integer\n    data.sensor_id = values[2].trim();\n    data.sensor_team = values[3].trim();\n    data.speed = parseFloat(values[4].trim());\n\n    // Validate the parsed values\n    if (!isNaN(data.timestampRegular) && !isNaN(data.speed)) {\n        if (selectedTeam !== \"all\" && selectedTeam != null && selectedTeam != undefined) {\n            if (data.sensor_team === selectedTeam) {\n                processedData.push(data);\n            }\n        } else {\n            processedData.push(data);\n        }\n    }\n}\n\n// Set the processed data as the message payload\nmsg.payload = processedData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1802,
        "y": 1900,
        "wires": [
            [
                "6ec1601595a583bd",
                "8587a362d75516bc",
                "939b69727e2e1ebd",
                "633eb6516625dd02"
            ]
        ]
    },
    {
        "id": "6ec1601595a583bd",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "calculate basic speed statistics",
        "func": "var speedData = msg.payload;\n\n// Initialize variables for calculations\nvar sumSpeed = 0;\nvar maxSpeed = -Infinity;\nvar minSpeed = Infinity;\nvar speedValues = [];\n\n// Iterate over speed data to collect statistics\nfor (var i = 0; i < speedData.length; i++) {\n    var speed = speedData[i].speed;\n\n    // Sum for average calculation\n    sumSpeed += speed;\n\n    // Check for max speed\n    if (speed > maxSpeed) {\n        maxSpeed = speed;\n    }\n\n    // Check for min speed\n    if (speed < minSpeed) {\n        minSpeed = speed;\n    }\n\n    // Collect speeds for standard deviation calculation\n    speedValues.push(speed);\n}\n\n// Calculate average speed\nvar averageSpeed = sumSpeed / speedData.length;\n\n// Calculate standard deviation\nvar mean = averageSpeed;\nvar sumSquaredDiffs = speedValues.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0);\nvar standardDeviation = Math.sqrt(sumSquaredDiffs / speedValues.length);\n\n// Prepare the payload with calculated statistics\nmsg.payload = {\n    averageSpeed: averageSpeed.toFixed(2),\n    maxSpeed: maxSpeed.toFixed(2),\n    minSpeed: minSpeed.toFixed(2),\n    standardDeviation: standardDeviation.toFixed(2)\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2122,
        "y": 1937,
        "wires": [
            [
                "9498014c428a88e5"
            ]
        ]
    },
    {
        "id": "8587a362d75516bc",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare speed for line chart",
        "func": "var processedData = msg.payload;\n\n// Initialize an array to hold the data for the speed chart\nvar speedData = [];\n\n// Iterate over the processed data to extract timestamp and speed\nfor (var i = 0; i < processedData.length; i++) {\n    var data = processedData[i];\n\n    // Prepare data for speed chart\n    speedData.push({\n        x: new Date(data.timestamp),\n        y: data.speed\n    });\n}\n\n// Set the processed speed data as the message payload\nmsg.payload = [{\n    series: [\"Speed\"],\n    data: [speedData],\n    labels: [\"\"]\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2112,
        "y": 1877,
        "wires": [
            [
                "8648bd5ee085e87b"
            ]
        ]
    },
    {
        "id": "8648bd5ee085e87b",
        "type": "ui_chart",
        "z": "ca49d97b508754c7",
        "name": "",
        "group": "7b778c48129e069b",
        "order": 19,
        "width": 17,
        "height": 6,
        "label": "speed chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2422,
        "y": 1877,
        "wires": [
            []
        ]
    },
    {
        "id": "9498014c428a88e5",
        "type": "ui_template",
        "z": "ca49d97b508754c7",
        "group": "7b778c48129e069b",
        "name": "speed statistics template",
        "order": 17,
        "width": 6,
        "height": 4,
        "format": "<!-- UI Template Node for Displaying Speed Statistics -->\n<div style=\"text-align: center;\">\n    <h2>Speed Statistics</h2>\n    <p><strong>Average Speed:</strong> {{msg.payload.averageSpeed}} m/s</p>\n    <p><strong>Max Speed:</strong> {{msg.payload.maxSpeed}} m/s</p>\n    <p><strong>Min Speed:</strong> {{msg.payload.minSpeed}} m/s</p>\n    <p><strong>Standard Deviation:</strong> {{msg.payload.standardDeviation}} m/s</p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2470,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "939b69727e2e1ebd",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "average speed by hour",
        "func": "var speedData = msg.payload;\nvar hourlySpeeds = {};\n\n// Aggregate speeds by hour\nfor (var i = 0; i < speedData.length; i++) {\n    var timestamp = new Date(speedData[i].timestamp);\n    var hour = timestamp.getUTCHours();\n    if (!hourlySpeeds[hour]) {\n        hourlySpeeds[hour] = { sumSpeed: 0, count: 0 };\n    }\n    hourlySpeeds[hour].sumSpeed += speedData[i].speed;\n    hourlySpeeds[hour].count += 1;\n}\n\n// Calculate average speed for each hour\nvar averageHourlySpeeds = [];\nfor (var hourStr in hourlySpeeds) {\n    var hour = parseInt(hourStr); // Ensure hour is treated as a number\n    var avgSpeed = hourlySpeeds[hour].sumSpeed / hourlySpeeds[hour].count;\n    averageHourlySpeeds.push({ hour: hour, averageSpeed: avgSpeed.toFixed(2) });\n}\n\n// Set the average hourly speeds as the message payload\nmsg.payload = averageHourlySpeeds;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2092,
        "y": 1997,
        "wires": [
            [
                "aa6aa5e6eb2461c8"
            ]
        ]
    },
    {
        "id": "aa6aa5e6eb2461c8",
        "type": "ui_template",
        "z": "ca49d97b508754c7",
        "group": "7b778c48129e069b",
        "name": "average speed by hour template",
        "order": 18,
        "width": 5,
        "height": 4,
        "format": "<table style=\"width:100%; border: 1px solid black; border-collapse: collapse;\">\n    <tr>\n        <th style=\"border: 1px solid black; padding: 5px;\">Hour</th>\n        <th style=\"border: 1px solid black; padding: 5px;\">Average Speed (km/h)</th>\n    </tr>\n    <tr ng-repeat=\"item in msg.payload\">\n        <td style=\"border: 1px solid black; padding: 5px;\">{{ item.hour }}</td>\n        <td style=\"border: 1px solid black; padding: 5px;\">{{ item.averageSpeed }}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2490,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "633eb6516625dd02",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "activity recognition (threshold-based)",
        "func": "// Function node for activity recognition (threshold-based)\nvar data = msg.payload;\n\n// Initialize counters for each activity\nvar walkingCount = 0;\nvar runningCount = 0;\nvar sprintingCount = 0;\n\n// Realistic thresholds based on typical speed ranges (m/s)\nvar walkingThreshold = 8;  // Speed < 8 m/s for walking\nvar runningThreshold = 16;  // Speed between 8 and 16 m/s for running\n\nfor (var i = 0; i < data.length; i++) {\n    var speed = parseFloat(data[i].speed);\n    \n    // Classify activities based on thresholds\n    if (speed < walkingThreshold) {\n        data[i].activity = \"Walking\";\n        walkingCount++;\n    } else if (speed >= walkingThreshold && speed < runningThreshold) {\n        data[i].activity = \"Running\";\n        runningCount++;\n    } else {\n        data[i].activity = \"Sprinting\";\n        sprintingCount++;\n    }\n}\n\n// Calculate percentages\nvar totalCount = walkingCount + runningCount + sprintingCount;\nvar walkingPercentage = (totalCount > 0) ? (walkingCount / totalCount) * 100 : 0;\nvar runningPercentage = (totalCount > 0) ? (runningCount / totalCount) * 100 : 0;\nvar sprintingPercentage = (totalCount > 0) ? (sprintingCount / totalCount) * 100 : 0;\n\n// Add the counts and percentages to the message payload\nmsg.payload = {\n    data: data,\n    counts: {\n        walking: walkingCount,\n        running: runningCount,\n        sprinting: sprintingCount\n    },\n    percentages: {\n        walking: walkingPercentage.toFixed(2),\n        running: runningPercentage.toFixed(2),\n        sprinting: sprintingPercentage.toFixed(2)\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2140,
        "wires": [
            [
                "724d6b484f38608c",
                "44e20c5819a2e5a6",
                "a8549cfabfeef677"
            ]
        ]
    },
    {
        "id": "e62cb51940e9fc4e",
        "type": "ui_chart",
        "z": "ca49d97b508754c7",
        "name": "speed activity distribution",
        "group": "7b778c48129e069b",
        "order": 16,
        "width": 6,
        "height": 4,
        "label": "Speed Activity Distribution",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#195886",
            "#3c7317",
            "#fd6a08",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2898,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "a8549cfabfeef677",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare sprinting data for pie chart",
        "func": "// Function node to prepare data for the pie chart\nvar percentages = msg.payload.percentages;\n\nmsg.payload = percentages.sprinting;\nmsg.topic = \"Sprinting\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 2200,
        "wires": [
            [
                "e62cb51940e9fc4e"
            ]
        ]
    },
    {
        "id": "724d6b484f38608c",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare walking data for pie chart",
        "func": "// Function node to prepare data for the pie chart\nvar percentages = msg.payload.percentages;\n\nmsg.payload = percentages.walking;\nmsg.topic = \"Walking\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 2080,
        "wires": [
            [
                "e62cb51940e9fc4e"
            ]
        ]
    },
    {
        "id": "44e20c5819a2e5a6",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "prepare running data for pie chart",
        "func": "// Function node to prepare data for the pie chart\nvar percentages = msg.payload.percentages;\n\nmsg.payload = percentages.running;\nmsg.topic = \"Running\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 2140,
        "wires": [
            [
                "e62cb51940e9fc4e"
            ]
        ]
    },
    {
        "id": "75730111f9c92b64",
        "type": "function",
        "z": "ca49d97b508754c7",
        "name": "statstical analysis for acceleration data",
        "func": "// Function node for statistical analysis\nvar data = msg.payload;\n\n// Helper function to calculate median\nfunction median(values) {\n    if (values.length === 0) return 0;\n    values.sort(function(a, b) {\n        return a - b;\n    });\n    var half = Math.floor(values.length / 2);\n    if (values.length % 2) {\n        return values[half];\n    } else {\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n}\n\n// Initialize arrays to hold values for each axis and magnitude\nvar xValues = [];\nvar yValues = [];\nvar zValues = [];\nvar magnitudeValues = [];\n\n// Populate arrays with data\nfor (var i = 0; i < data.length; i++) {\n    xValues.push(data[i].x);\n    yValues.push(data[i].y);\n    zValues.push(data[i].z);\n    magnitudeValues.push(data[i].magnitude);\n}\n\n// Function to calculate mean\nfunction mean(values) {\n    var sum = values.reduce((a, b) => a + b, 0);\n    return sum / values.length;\n}\n\n// Function to calculate variance\nfunction variance(values, meanValue) {\n    return values.reduce((a, b) => a + Math.pow(b - meanValue, 2), 0) / values.length;\n}\n\n// Calculate statistics for each axis and magnitude\nvar meanX = mean(xValues);\nvar meanY = mean(yValues);\nvar meanZ = mean(zValues);\nvar meanMagnitude = mean(magnitudeValues);\n\nvar varianceX = variance(xValues, meanX);\nvar varianceY = variance(yValues, meanY);\nvar varianceZ = variance(zValues, meanZ);\nvar varianceMagnitude = variance(magnitudeValues, meanMagnitude);\n\nvar stdDevX = Math.sqrt(varianceX);\nvar stdDevY = Math.sqrt(varianceY);\nvar stdDevZ = Math.sqrt(varianceZ);\nvar stdDevMagnitude = Math.sqrt(varianceMagnitude);\n\nvar medianX = median(xValues);\nvar medianY = median(yValues);\nvar medianZ = median(zValues);\nvar medianMagnitude = median(magnitudeValues);\n\n// Add statistics to the message payload\nmsg.payload = {\n    mean: {\n        x: meanX.toFixed(2),\n        y: meanY.toFixed(2),\n        z: meanZ.toFixed(2),\n        magnitude: meanMagnitude.toFixed(2)\n    },\n    median: {\n        x: medianX.toFixed(2),\n        y: medianY.toFixed(2),\n        z: medianZ.toFixed(2),\n        magnitude: medianMagnitude.toFixed(2)\n    },\n    variance: {\n        x: varianceX.toFixed(2),\n        y: varianceY.toFixed(2),\n        z: varianceZ.toFixed(2),\n        magnitude: varianceMagnitude.toFixed(2)\n    },\n    stdDev: {\n        x: stdDevX.toFixed(2),\n        y: stdDevY.toFixed(2),\n        z: stdDevZ.toFixed(2),\n        magnitude: stdDevMagnitude.toFixed(2)\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2202,
        "y": 1340,
        "wires": [
            [
                "e50229467a78f220"
            ]
        ]
    },
    {
        "id": "e50229467a78f220",
        "type": "ui_template",
        "z": "ca49d97b508754c7",
        "group": "7b778c48129e069b",
        "name": "",
        "order": 15,
        "width": 17,
        "height": 3,
        "format": "<table border=\"1\" style=\"width:100%; border-collapse: collapse;\">\n    <thead>\n        <tr>\n            <th>Acceleration Statistic</th>\n            <th>X</th>\n            <th>Y</th>\n            <th>Z</th>\n            <th>Magnitude</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Mean</td>\n            <td>{{msg.payload.mean.x}}</td>\n            <td>{{msg.payload.mean.y}}</td>\n            <td>{{msg.payload.mean.z}}</td>\n            <td>{{msg.payload.mean.magnitude}}</td>\n        </tr>\n        <tr>\n            <td>Median</td>\n            <td>{{msg.payload.median.x}}</td>\n            <td>{{msg.payload.median.y}}</td>\n            <td>{{msg.payload.median.z}}</td>\n            <td>{{msg.payload.median.magnitude}}</td>\n        </tr>\n        <tr>\n            <td>Variance</td>\n            <td>{{msg.payload.variance.x}}</td>\n            <td>{{msg.payload.variance.y}}</td>\n            <td>{{msg.payload.variance.z}}</td>\n            <td>{{msg.payload.variance.magnitude}}</td>\n        </tr>\n        <tr>\n            <td>Standard Deviation</td>\n            <td>{{msg.payload.stdDev.x}}</td>\n            <td>{{msg.payload.stdDev.y}}</td>\n            <td>{{msg.payload.stdDev.z}}</td>\n            <td>{{msg.payload.stdDev.magnitude}}</td>\n        </tr>\n    </tbody>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2512,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "71378afb87ae2a57",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "fd762f25ef4d4e23",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "ead7bda58ef71f59",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "fd762f25ef4d4e23",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "a4e8425aa35c07f8",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "fd762f25ef4d4e23",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "975dd795771ea4ab",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "fd762f25ef4d4e23",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "6ebd457ce8feecd9",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "fd762f25ef4d4e23",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "3ea46261cb49179c",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "7c0cdd9a9b3f3943",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "efaecd1e77d4bd7d",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "70e4c97ab3d2a933",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "7c251fb28004272a",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "576010c1c4e7dc99",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "3319d274bdd18094",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "b3327cde6b284d2b",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "a7049eac7cfc5645",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "f383161a9ea4db57",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 12,
        "width": 5,
        "height": 1
    },
    {
        "id": "5c49bdae9ae2aafc",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "17ed4df4c2588008",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "ab648f793da58fbd",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "3864273dd2694bc3",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "7dcbfc0f2d9071a6",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "46b92a0f1b40098f",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 25,
        "width": 5,
        "height": 1
    },
    {
        "id": "f462814cfbf3d365",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 26,
        "width": 5,
        "height": 1
    },
    {
        "id": "ffeaf3f962e8cdbf",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 27,
        "width": 5,
        "height": 1
    },
    {
        "id": "909a2fecf7e9f7e3",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "a368d4cf572e8429",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 31,
        "width": 1,
        "height": 1
    },
    {
        "id": "8ba9d6b0121a5f87",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "a716128058a93a51",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "6ea288f848cdd470",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "af73e8e86458bf2d",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "b35f462a29570f8a",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "9a2736dcd35acb61",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 37,
        "width": 1,
        "height": 1
    },
    {
        "id": "fb19e50e62f4dd12",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 38,
        "width": 5,
        "height": 1
    },
    {
        "id": "73a97b474783ebcc",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 40,
        "width": 4,
        "height": 1
    },
    {
        "id": "1b2487be0a3cc9d7",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 41,
        "width": 5,
        "height": 1
    },
    {
        "id": "bc486bba0273be52",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 42,
        "width": 4,
        "height": 1
    },
    {
        "id": "96455224cde89e16",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 43,
        "width": 5,
        "height": 1
    },
    {
        "id": "114c34d5c76213c4",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 44,
        "width": 4,
        "height": 1
    },
    {
        "id": "f4d606e21bc536f6",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 45,
        "width": 5,
        "height": 1
    },
    {
        "id": "fb1f6f80380e6e73",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 46,
        "width": 4,
        "height": 1
    },
    {
        "id": "cfb17bbc77a9e9ec",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 47,
        "width": 5,
        "height": 1
    },
    {
        "id": "2cadd0a870e68d5c",
        "type": "ui_spacer",
        "z": "ca49d97b508754c7",
        "name": "spacer",
        "group": "7b778c48129e069b",
        "order": 48,
        "width": 4,
        "height": 1
    },
    {
        "id": "7b778c48129e069b",
        "type": "ui_group",
        "name": "Cold Path",
        "tab": "c67b592948628c69",
        "order": 2,
        "disp": true,
        "width": 17,
        "collapse": false,
        "className": ""
    },
    {
        "id": "37464be6e8cb6157",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fd762f25ef4d4e23",
        "type": "ui_group",
        "name": "Average Heart rate",
        "tab": "701a158941a1ef14",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c67b592948628c69",
        "type": "ui_tab",
        "name": "Final Project",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "701a158941a1ef14",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]