[
    {
        "id": "149c3bc769e9c702",
        "type": "tab",
        "label": "IoT-Sensor-Data-Processing-NodeRED",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "75612c5d07d50cec",
        "type": "mqtt in",
        "z": "149c3bc769e9c702",
        "name": "",
        "topic": "team/sensors",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "37464be6e8cb6157",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 240,
        "wires": [
            [
                "f85f956ce0b126c9",
                "f74bdc4a4e3739d4",
                "564b3e35eae78f30",
                "c846d20ef072a6ce",
                "c4e3a3bfdde8cc75",
                "f885ebc672fb4284",
                "69bf1f9c8867363f"
            ]
        ]
    },
    {
        "id": "f85f956ce0b126c9",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Cold Path",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f74bdc4a4e3739d4",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Hot Path Heartrate",
        "func": "\nvar teamId = global.get(\"selectedTeam\");\n\nif (msg.payload.sensor_type === \"vital_parameters\") {\n\nif(msg.payload.sensor_team === teamId && teamId !== \"all\"){\n    const { heart_rate, body_temperature } = msg.payload.data;\n\n    var average = calculateAverage(heart_rate);\n\n    if (heart_rate > 100 || body_temperature > 37.5) {\n        node.warn(\"Heart Rate: critical, value: \"+ heart_rate);\n        msg.payload = {\n            status: \"critical\",\n            heart_rate: heart_rate,\n            average : average\n        };   return msg;\n    }else{\n        msg.payload = {\n            status: \"normal\",\n            heart_rate: heart_rate,\n            average : average\n        }; \n        \n          return msg;\n    }\n}else if(teamId === \"all\"){\n   let heart_rate1 = context.get('HRTeam1') || 0;\n   let heart_rate2 = context.get('HRTeam2') || 0;\n   let heart_rate3 = context.get('HRTeam3') || 0;\n\n    if(msg.payload.sensor_team === \"team_1\"){\n        heart_rate1 = msg.payload.data.heart_rate;\n        context.set('HRTeam1', heart_rate1);\n    }\n    if(msg.payload.sensor_team === \"team_2\"){\n        heart_rate2 = msg.payload.data.heart_rate;\n        context.set('HRTeam2', heart_rate2);\n    }\n    if(msg.payload.sensor_team === \"team_3\"){\n        heart_rate3 = msg.payload.data.heart_rate;\n        context.set('HRTeam3', heart_rate3);\n\n    }\n\n    const heart_rate = ((heart_rate1 +  heart_rate2 + heart_rate3)/3).toFixed(2);\n    var average = calculateAverage(heart_rate);\n    msg.payload = {\n        status : \"combined values\",\n        heart_rate : heart_rate,\n        average : average,\n        };\n    return msg;\n}\n\nfunction calculateAverage(heart_rate){\n    var values = context.get('values') || [];\n     var sum = context.get('sum') || 0;\n \nvar value = parseFloat(heart_rate);\n\nif (!isNaN(value)) {\n    values.push(value)\n    sum += value;\n\n    if (values.length > 10) {\n        var removedValue = values.shift();\n        sum -= removedValue;\n    }\n\n    var average = (sum / values.length).toFixed(2);\n\n    context.set('values', values);\n    context.set('sum', sum);\n    return average;\n    } \n}\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 360,
        "wires": [
            [
                "c34d98d379dea45f",
                "30c29812170bf22f",
                "74570cf60f15fb6d",
                "d3420aec7242c9cc"
            ]
        ]
    },
    {
        "id": "564b3e35eae78f30",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Hot Path Body Temperature",
        "func": "var teamId = global.get(\"selectedTeam\");\n\n\nif (msg.payload.sensor_type === \"vital_parameters\") {\n\nif(msg.payload.sensor_team === teamId && teamId !== \"all\"){\n\n    const { heart_rate, body_temperature } = msg.payload.data;\n    var average = calculateAverage(body_temperature);\n    \n    if (heart_rate > 100 || body_temperature > 37.5) {\n        node.warn(\"Anomaly detected:\"+ msg.payload);\n     msg.payload = {\n            status: \"critical\",\n            body_temperature: body_temperature,\n            average: average\n        };   return msg;\n    }else{\n        msg.payload = {\n            status: \"normal\",\n            body_temperature: body_temperature,\n            average : average\n        };   return msg;\n    }\n    \n} else if (teamId === \"all\") {\n    let body_temperature1 = context.get('BRTeam1') || 0;\n    let body_temperature2 = context.get('BRTeam2') || 0;\n    let body_temperature3 = context.get('BRTeam3') || 0;\n\n    if (msg.payload.sensor_team === \"team_1\") {\n        body_temperature1 = msg.payload.data.body_temperature;\n        context.set('BRTeam1', body_temperature1);\n    }\n    if (msg.payload.sensor_team === \"team_2\") {\n        body_temperature2 = msg.payload.data.body_temperature;\n        context.set('BRTeam2', body_temperature2);\n    }\n    if (msg.payload.sensor_team === \"team_3\") {\n        body_temperature3 = msg.payload.data.body_temperature;\n        context.set('BRTeam3', body_temperature3);\n\n    }\n\n    const body_temperature = ((body_temperature1 + body_temperature2 + body_temperature3) / 3).toFixed(2);\n    var average = calculateAverage(body_temperature);\n    msg.payload = {\n        status: \"combined values\",\n        body_temperature: body_temperature,\n        average: average\n    };\n    return msg;\n}\n\nfunction calculateAverage(body_temperature){\n    var values = context.get('values') || [];\n    var sum = context.get('sum') || 0;\n\n    var value = parseFloat(body_temperature);\n\n    if (!isNaN(value)) {\n        values.push(value)\n        sum += value;\n\n        if (values.length > 10) {\n            var removedValue = values.shift();\n            sum -= removedValue;\n        }\n\n        var average = (sum / values.length).toFixed(2);\n\n        context.set('values', values);\n        context.set('sum', sum);\n        return average;\n    }\n\n}\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 500,
        "wires": [
            [
                "fce65bf681cec9da",
                "550bb752a3334035",
                "f218d28ae010fec1"
            ]
        ]
    },
    {
        "id": "c846d20ef072a6ce",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Hot Path Position",
        "func": "var teamId = global.get(\"selectedTeam\");\n\nif (msg.payload.sensor_team === teamId) {\nif (msg.payload.sensor_type === \"position\") {\n    const { latitude, longitude, altitude } = msg.payload.data;\n    \n   msg.payload = {\n            latitude: latitude,\n            longitude: longitude,\n            altitude: altitude\n        };  \n         return msg;\n}\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 660,
        "wires": [
            [
                "abc1f2958753c388",
                "972a0c3def7b5eb7"
            ]
        ]
    },
    {
        "id": "c4e3a3bfdde8cc75",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Hot Path Speed",
        "func": "var teamId = global.get(\"selectedTeam\");\n\nif (msg.payload.sensor_type === \"speed\") {\nif (msg.payload.sensor_team === teamId && teamId !== \"all\") {\n\n\nconst speed = msg.payload.data.speed;\n    var averageSpeed = calculateAverage(speed);\n         \n    if (speed <= 7) {\n        msg.payload = {\n            activity: \"walking\",\n            speed: speed,\n            averageSpeed: averageSpeed\n        };\n        flow.set(\"dataWalking\", msg.payload);\n\n         //return msg;\n    } else if(speed > 7 && speed < 14) {\n        msg.payload = {\n            activity: \"running\",\n            speed: speed,\n            averageSpeed: averageSpeed\n        }; //return msg;\n    }else{\n        msg.payload = {\n            activity: \"sprinting\",\n            speed : speed,\n            averageSpeed: averageSpeed\n        }; //return msg;\n    }\n    flow.set(\"dataSpeed\", msg.payload);\n    return msg;\n    \n    }  else if (teamId === \"all\") {\n    let speed1 = context.get('speedTeam1') || 0;\n    let speed2 = context.get('speedTeam2') || 0;\n    let speed3 = context.get('speedTeam3') || 0;\n\n    if (msg.payload.sensor_team === \"team_1\") {\n        speed1 = parseFloat(msg.payload.data.speed);\n        context.set('speedTeam1', speed1);\n    }\n    if (msg.payload.sensor_team === \"team_2\") {\n        speed2 = parseFloat(msg.payload.data.speed);\n        context.set('speedTeam2', speed2);\n    }\n    if (msg.payload.sensor_team === \"team_3\") {\n        speed3 = parseFloat(msg.payload.data.speed);\n        context.set('speedTeam3', speed3);\n\n    }\n\n    var speed = ((speed1 + speed2 + speed3) / 3).toFixed(2);\n    var averageSpeed = calculateAverage(speed);\n    msg.payload = {\n        activity: \"combined activities\",\n        speed: speed,\n        averageSpeed: averageSpeed,\n        speed1 : speed1,\n        speed2: speed2,\n        speed3: speed3\n    };\n    return msg;\n}\n    function calculateAverage(speed){\n        var values = context.get('values') || [];\n        var sum = context.get('sum') || 0;\n\n        var value = parseFloat(speed);\n\n        if (!isNaN(value)) {\n            values.push(value)\n            sum += value;\n\n            if (values.length > 10) {\n                var removedValue = values.shift();\n                sum -= removedValue;\n            }\n\n            var averageSpeed = (sum / values.length).toFixed(2);\n\n            context.set('values', values);\n            context.set('sum', sum);\n            return averageSpeed;\n        }\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "c618a58345d5b9df",
                "098f916d2d27ecee",
                "4fa02e2ba43cb8b7",
                "d3420aec7242c9cc",
                "41dd95e72d232e7b"
            ]
        ]
    },
    {
        "id": "f885ebc672fb4284",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Hot Path Acceleration",
        "func": "\n\nvar current_timestamp = msg.payload.timestampRegular;\nvar previous_velocity = context.get('previous_velocity') || null;\nvar previous_timestamp = context.get('previous_timestamp') || null;\nvar teamId = global.get(\"selectedTeam\");\nif (msg.payload.sensor_type === \"speed\") {\n    const current_velocity = msg.payload.data.speed;\n\nif(msg.payload.sensor_team === teamId){\n\nif (previous_velocity !== null && previous_timestamp !== null) {\n\n    var velocity = current_velocity - previous_velocity;\n    var time = current_timestamp - previous_timestamp;\n\n    // Check if delta_t is not zero to avoid division by zero\n    if (time !== 0) {\n        // Calculate acceleration\n        var acceleration = velocity / time;\n\n        // Set the acceleration as the payload for the outgoing message\n        msg.payload = {\n            current_velocity: current_velocity, \n            acceleration: acceleration, \n            timestamp: current_timestamp \n        };\n\n        // Update context variables\n        context.set('previous_velocity', current_velocity);\n        context.set('previous_timestamp', current_timestamp);\n\n        // Return the message\n        return msg;\n    } else {\n        return null; // Ignore the message if delta_t is zero\n    }\n} else {\n    // Initialize context variables if they are not set\n    context.set('previous_velocity', current_velocity);\n    context.set('previous_timestamp', current_timestamp);\n    return null; // No acceleration can be calculated on the first data point\n}\n}\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 940,
        "wires": [
            [
                "b9db528833585ea6"
            ]
        ]
    },
    {
        "id": "c07abae0c8e4ce82",
        "type": "ui_gauge",
        "z": "149c3bc769e9c702",
        "name": "",
        "group": "0c220355ed5d450a",
        "order": 5,
        "width": 8,
        "height": 6,
        "gtype": "gage",
        "title": "heart_rate",
        "label": "bpm",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 1450,
        "y": 400,
        "wires": []
    },
    {
        "id": "c34d98d379dea45f",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "extract heart rate",
        "func": "\nconst heart_rate = msg.payload.heart_rate;\nmsg.payload = heart_rate;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 400,
        "wires": [
            [
                "c07abae0c8e4ce82"
            ]
        ]
    },
    {
        "id": "30c29812170bf22f",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 6,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Status heart rate",
        "format": "{{msg.payload.status}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "fce65bf681cec9da",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "extract body temperature",
        "func": "const body_temperature = msg.payload.body_temperature;\nmsg.payload = body_temperature;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "caed3b7cabebaedf"
            ]
        ]
    },
    {
        "id": "caed3b7cabebaedf",
        "type": "ui_gauge",
        "z": "149c3bc769e9c702",
        "name": "",
        "group": "0c220355ed5d450a",
        "order": 12,
        "width": 8,
        "height": 6,
        "gtype": "gage",
        "title": "body_temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": "34",
        "max": "45",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "38",
        "seg2": "42",
        "diff": false,
        "className": "",
        "x": 1470,
        "y": 540,
        "wires": []
    },
    {
        "id": "550bb752a3334035",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 13,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Status body temperature",
        "format": "{{msg.payload.status}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1050,
        "y": 500,
        "wires": []
    },
    {
        "id": "46c426073b26af55",
        "type": "ui_worldmap",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 4,
        "width": 8,
        "height": 8,
        "name": "Position",
        "lat": "",
        "lon": "",
        "zoom": "7",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1440,
        "y": 700,
        "wires": []
    },
    {
        "id": "abc1f2958753c388",
        "type": "change",
        "z": "149c3bc769e9c702",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.name",
                "pt": "msg",
                "to": "positionMap",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.ion",
                "pt": "msg",
                "to": "payload.longitude",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.lat",
                "pt": "msg",
                "to": "payload.latitude",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 720,
        "wires": [
            [
                "46c426073b26af55"
            ]
        ]
    },
    {
        "id": "f916dfe06358c81a",
        "type": "ui_gauge",
        "z": "149c3bc769e9c702",
        "name": "",
        "group": "0c220355ed5d450a",
        "order": 20,
        "width": 8,
        "height": 6,
        "gtype": "gage",
        "title": "speed",
        "label": "km/h",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1310,
        "y": 860,
        "wires": []
    },
    {
        "id": "c618a58345d5b9df",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "extract speed",
        "func": "\nconst speed = msg.payload.speed;\nmsg.payload = speed;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "f916dfe06358c81a"
            ]
        ]
    },
    {
        "id": "098f916d2d27ecee",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 21,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Activity status",
        "format": "{{msg.payload.activity}} ",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 900,
        "wires": []
    },
    {
        "id": "74570cf60f15fb6d",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 7,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Average current heartbeat rate: ",
        "format": "{{msg.payload.average}} bpm",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "67c0b64a3c6fd3e6",
        "type": "ui_switch",
        "z": "149c3bc769e9c702",
        "name": "",
        "label": "Running",
        "tooltip": "",
        "group": "6f2fe565188cff53",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "run",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 100,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "f218d28ae010fec1",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 14,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Average current body temperature:",
        "format": "{{msg.payload.average}} °C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1080,
        "y": 460,
        "wires": []
    },
    {
        "id": "4fa02e2ba43cb8b7",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 23,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Average current pace",
        "format": "{{msg.payload.averageSpeed}} km/h",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1040,
        "y": 840,
        "wires": []
    },
    {
        "id": "b9db528833585ea6",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 25,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Acceleration",
        "format": "{{msg.payload.acceleration}} m/s^2",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1010,
        "y": 980,
        "wires": []
    },
    {
        "id": "49f8e8d6eff8682c",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "Determine activity",
        "func": "\n// Initialize running and sprinting variables from context\nvar running = context.get(\"running\") || false;  // Assuming these are boolean states\nvar sprinting = context.get(\"sprinting\") || false;\n\nvar topic = msg.topic;\n\n// Update running or sprinting based on topic\nif (topic === \"run\") {\n    running = msg.payload;\n    context.set(\"running\", running);  // Store updated state back to context\n} else if (topic === \"sprint\") {\n    sprinting = msg.payload;\n    context.set(\"sprinting\", sprinting);  // Store updated state back to context\n}\n\n// Determine payload based on states\nif (running) {\n    \n    var team = 2;  // Running activity\n    \n} else if (sprinting) {\n    var team = 3;  // Sprinting activity\n    \n} else {\n    var team = 1  // No specific activity\n    \n}\nmsg.payload = team;\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "02209fb62a6d0c4f",
        "type": "mqtt out",
        "z": "149c3bc769e9c702",
        "name": "",
        "topic": "team",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "37464be6e8cb6157",
        "x": 90,
        "y": 920,
        "wires": []
    },
    {
        "id": "b96a901112437aff",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "function 5",
        "func": "if (msg.payload.sensor_type === \"vital_parameters\") {\n\nconst { heart_rate, body_temperature } = msg.payload.data;\nmsg.payload = heart_rate\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "1f8a7f3422aae242",
        "type": "ui_switch",
        "z": "149c3bc769e9c702",
        "name": "",
        "label": "Sprinting",
        "tooltip": "",
        "group": "6f2fe565188cff53",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "sprint",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 100,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "d3420aec7242c9cc",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "detect heart anomaly",
        "func": "var average = msg.payload.average;  \nvar activitySpeed = flow.get(\"dataSpeed\").activity;  \nlet statusAnomaly;\n\nif(average >= 120 && activitySpeed === \"walking\"){\n    statusAnomaly = \"Heart anomaly detected\";\n}else if(average <= 40 && activitySpeed === \"walking\"){\n    statusAnomaly = \"Heart anomaly detected\";\n}else{\n    statusAnomaly = \"no Anomalies detected\";\n}\n\n\nmsg.payload = statusAnomaly;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 260,
        "wires": [
            [
                "a2041bca8d5e1211"
            ]
        ]
    },
    {
        "id": "972a0c3def7b5eb7",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "distance travelled",
        "func": "var totalDistance = context.get('totalDistance') || 0;\nlet latArray = context.get('previous_latArray') || [];\nlet lonArray = context.get('previous_lonArray') || [];\n\nvar lat = msg.payload.latitude;\nvar lon = msg.payload.longitude;\n\nlatArray.push(lat);\nif(latArray.length > 2){\n    latArray.shift();\n}\nlonArray.push(lon);\nif(lonArray.length > 2){\n    lonArray.shift();\n}\n\nif(latArray.length == 2){\nfor (var i = 1; i < latArray.length; i++) {\n    \n    var distance = haversineDistance(latArray[0], lonArray[0], latArray[1], lonArray[1]);\n    totalDistance += distance;\n}\n}\ncontext.set('totalDistance', totalDistance);\n\ntotalDistance = totalDistance / 1000; // Convert to kilometers\ncontext.set('previous_latArray', latArray);\ncontext.set('previous_lonArray', lonArray);\nmsg.payload = {totalD: totalDistance.toFixed(4) + \"km\",\n            type : msg.payload.sensor_type}; // Format the payload as a string with two decimal places\nreturn msg;\n\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n    var R = 6371000; // Radius of the Earth in meters\n    var phi1 = toRadians(lat1);\n    var phi2 = toRadians(lat2);\n    var deltaPhi = toRadians(lat2 - lat1);\n    var deltaLambda = toRadians(lon2 - lon1);\n\n    var a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\n        Math.cos(phi1) * Math.cos(phi2) *\n        Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    var distance = R * c;\n    return distance;\n}\n\nfunction toRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "381eaac708ca1807",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 15,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "Distance travelled",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1470,
        "y": 660,
        "wires": []
    },
    {
        "id": "a2041bca8d5e1211",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 8,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Status Anomaly",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1460,
        "y": 220,
        "wires": []
    },
    {
        "id": "660835467245b522",
        "type": "ui_dropdown",
        "z": "149c3bc769e9c702",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select team",
        "group": "0c220355ed5d450a",
        "order": 1,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All teams",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Team 1",
                "value": "team_1",
                "type": "str"
            },
            {
                "label": " Team 2",
                "value": "team_2",
                "type": "str"
            },
            {
                "label": " Team 3",
                "value": "team_3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "30015b0d9ad8d0b3"
            ]
        ]
    },
    {
        "id": "30015b0d9ad8d0b3",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "function 6",
        "func": "\nvar teamId = msg.payload;\nglobal.set(\"selectedTeam\", teamId);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 460,
        "wires": [
            [
                "4c79c1f3b75f43d1"
            ]
        ]
    },
    {
        "id": "4c79c1f3b75f43d1",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "function 7",
        "func": "\n\nvar teamId = global.get(\"selectedTeam\");\nif(teamId === 1){\n    msg.payload = \"Team 1\";\n}else if(teamId === 2){\n    msg.payload = \"Team 2\";\n}else if(teamId === 3){\n    msg.payload = \"Team 3\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 520,
        "wires": [
            [
                "18a8723a55c6d0d4"
            ]
        ]
    },
    {
        "id": "18a8723a55c6d0d4",
        "type": "ui_text",
        "z": "149c3bc769e9c702",
        "group": "0c220355ed5d450a",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Team",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 130,
        "y": 600,
        "wires": []
    },
    {
        "id": "41dd95e72d232e7b",
        "type": "debug",
        "z": "149c3bc769e9c702",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "69bf1f9c8867363f",
        "type": "function",
        "z": "149c3bc769e9c702",
        "name": "function 8",
        "func": "var teamId = global.get(\"selectedTeam\");\n\n\nvar totalDistanceTeam1 = context.get('totalDistanceTeam1') || 0;\nlet latArrayTeam1 = context.get('previous_latArrayTeam1') || [];\nlet lonArrayTeam1 = context.get('previous_lonArrayTeam1') || [];\nvar totalDistanceTeam2 = context.get('totalDistanceTeam2') || 0;\nlet latArrayTeam2 = context.get('previous_latArrayTeam2') || [];\nlet lonArrayTeam2 = context.get('previous_lonArrayTeam2') || [];\nvar totalDistanceTeam3 = context.get('totalDistanceTeam3') || 0;\nlet latArrayTeam3 = context.get('previous_latArrayTeam3') || [];\nlet lonArrayTeam3 = context.get('previous_lonArrayTeam3') || [];\n\n\n\n\n\n\nif(msg.payload.sensor_type === \"position\"){\n    if(msg.payload.sensor_team === \"team_1\"){\n        const { latitude, longitude, altitude } = msg.payload.data;\n        latArrayTeam1.push(latitude);\n          if(latArrayTeam1.length > 2){\n             latArrayTeam1.shift();\n           }\n          lonArrayTeam1.push(longitude);\n          if(lonArrayTeam1.length > 2){\n             lonArrayTeam1.shift();\n}\n\n        if(latArrayTeam1.length == 2){\n           for (var i = 1; i < latArrayTeam1.length; i++) {\n    \n    var distanceCalc = haversineDistance(latArrayTeam1[0], lonArrayTeam1[0], latArrayTeam1[1], lonArrayTeam1[1]);\n    totalDistanceTeam1 += distanceCalc;\n}\n}\ncontext.set('totalDistance', totalDistanceTeam1);\n\ntotalDistanceTeam1 = totalDistanceTeam1 / 1000; // Convert to kilometers\ncontext.set('previous_latArrayTeam1', latArrayTeam1);\ncontext.set('previous_lonArrayTeam1', lonArrayTeam1);\n//msg.payload = {totalD: totalDistanceTeam1.toFixed(4) + \"km\",\n//            type : msg.payload.sensor_type}; // Format the payload as a string with two decimal places\n\n//        return msg;\n    }\n    if (msg.payload.sensor_team === \"team_2\"){\n        const { latitude, longitude, altitude } = msg.payload.data;\n    }\n    if (msg.payload.sensor_team === \"team_3\"){\n        const { latitude, longitude, altitude } = msg.payload.data;\n        \n    }\n    function haversineDistance(lat1, lon1, lat2, lon2) {\n        var R = 6371000; // Radius of the Earth in meters\n        var phi1 = toRadians(lat1);\n        var phi2 = toRadians(lat2);\n        var deltaPhi = toRadians(lat2 - lat1);\n        var deltaLambda = toRadians(lon2 - lon1);\n\n        var a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +\n            Math.cos(phi1) * Math.cos(phi2) *\n            Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n        var distance = R * c;\n        return distance;\n    }\n\n    function toRadians(degrees) {\n        return degrees * Math.PI / 180;\n    }\n\n\n\n    \n\n    if (teamId === \"team_1\"){\n         msg.payload = totalDistanceTeam1;\n    }else if(teamId === \"team_2\"){\n        msg.payload = totalDistanceTeam2;\n    }else if(teamId === \"team_3\"){\n        msg.payload = totalDistanceTeam3;\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 600,
        "wires": [
            [
                "381eaac708ca1807"
            ]
        ]
    },
    {
        "id": "d0531a473183d74d",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "91478c5dae5867a5",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "406178f8490bc6dc",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 10,
        "width": 9,
        "height": 1
    },
    {
        "id": "0756b9aad11cac13",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "650d3d77bc2d7dee",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 16,
        "width": 17,
        "height": 1
    },
    {
        "id": "d514edea463c0bb8",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 17,
        "width": 17,
        "height": 1
    },
    {
        "id": "6dfe1ea3f0d3cf6d",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 18,
        "width": 17,
        "height": 1
    },
    {
        "id": "380a3f05171ad5fe",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 19,
        "width": 17,
        "height": 1
    },
    {
        "id": "ef8e32b2ddb1cdd4",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 22,
        "width": 8,
        "height": 1
    },
    {
        "id": "91b0e3a3b7d4fa5c",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 24,
        "width": 8,
        "height": 1
    },
    {
        "id": "ec02899263d2c217",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 26,
        "width": 8,
        "height": 1
    },
    {
        "id": "3216943174e75d8d",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 27,
        "width": 17,
        "height": 1
    },
    {
        "id": "5e559349a6f18666",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 28,
        "width": 17,
        "height": 1
    },
    {
        "id": "cb599318ae6ad7dc",
        "type": "ui_spacer",
        "z": "149c3bc769e9c702",
        "name": "spacer",
        "group": "0c220355ed5d450a",
        "order": 29,
        "width": 17,
        "height": 1
    },
    {
        "id": "37464be6e8cb6157",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0c220355ed5d450a",
        "type": "ui_group",
        "name": "Sensors",
        "tab": "e7bcb01c9e0da795",
        "order": 1,
        "disp": true,
        "width": 25,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6f2fe565188cff53",
        "type": "ui_group",
        "name": "HeartrateAVG",
        "tab": "118431e0dd7f625a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7bcb01c9e0da795",
        "type": "ui_tab",
        "name": "Output",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "118431e0dd7f625a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]